<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>即时通信系统-9-客户端实现</title>
    <link href="/2023/07/17/%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F-9-%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%9E%E7%8E%B0/"/>
    <url>/2023/07/17/%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F-9-%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p>#客户端实现<br>client.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br> <br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;flag&quot;</span><br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;io&quot;</span><br>    <span class="hljs-string">&quot;net&quot;</span><br>    <span class="hljs-string">&quot;os&quot;</span><br>)<br> <br><span class="hljs-keyword">type</span> Client <span class="hljs-keyword">struct</span> &#123;<br>    ServerIp   <span class="hljs-type">string</span><br>    ServerPort <span class="hljs-type">int</span><br>    Name       <span class="hljs-type">string</span><br>    conn       net.Conn<br>    flag       <span class="hljs-type">int</span> <span class="hljs-comment">//当前client的模式</span><br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewClient</span><span class="hljs-params">(serverIp <span class="hljs-type">string</span>, serverPort <span class="hljs-type">int</span>)</span></span> *Client &#123;<br>    <span class="hljs-comment">//创建客户端对象</span><br>    client := &amp;Client&#123;<br>        ServerIp:   serverIp,<br>        ServerPort: serverPort,<br>        flag:       <span class="hljs-number">999</span>,<br>    &#125;<br> <br>    <span class="hljs-comment">//链接server</span><br>    conn, err := net.Dial(<span class="hljs-string">&quot;tcp&quot;</span>, fmt.Sprintf(<span class="hljs-string">&quot;%s:%d&quot;</span>, serverIp, serverPort))<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        fmt.Println(<span class="hljs-string">&quot;net.Dial error:&quot;</span>, err)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>    &#125;<br> <br>    client.conn = conn<br> <br>    <span class="hljs-comment">//返回对象</span><br>    <span class="hljs-keyword">return</span> client<br>&#125;<br> <br><span class="hljs-comment">//处理server回应的消息， 直接显示到标准输出即可</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(client *Client)</span></span> DealResponse() &#123;<br>    <span class="hljs-comment">//一旦client.conn有数据，就直接copy到stdout标准输出上, 永久阻塞监听</span><br>    io.Copy(os.Stdout, client.conn)<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(client *Client)</span></span> menu() <span class="hljs-type">bool</span> &#123;<br>    <span class="hljs-keyword">var</span> flag <span class="hljs-type">int</span><br> <br>    fmt.Println(<span class="hljs-string">&quot;1.公聊模式&quot;</span>)<br>    fmt.Println(<span class="hljs-string">&quot;2.私聊模式&quot;</span>)<br>    fmt.Println(<span class="hljs-string">&quot;3.更新用户名&quot;</span>)<br>    fmt.Println(<span class="hljs-string">&quot;0.退出&quot;</span>)<br> <br>    fmt.Scanln(&amp;flag)<br> <br>    <span class="hljs-keyword">if</span> flag &gt;= <span class="hljs-number">0</span> &amp;&amp; flag &lt;= <span class="hljs-number">3</span> &#123;<br>        client.flag = flag<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        fmt.Println(<span class="hljs-string">&quot;&gt;&gt;&gt;&gt;请输入合法范围内的数字&lt;&lt;&lt;&lt;&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br> <br>&#125;<br> <br><span class="hljs-comment">//查询在线用户</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(client *Client)</span></span> SelectUsers() &#123;<br>    sendMsg := <span class="hljs-string">&quot;who\n&quot;</span><br>    _, err := client.conn.Write([]<span class="hljs-type">byte</span>(sendMsg))<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        fmt.Println(<span class="hljs-string">&quot;conn Write err:&quot;</span>, err)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>&#125;<br> <br><span class="hljs-comment">//私聊模式</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(client *Client)</span></span> PrivateChat() &#123;<br>    <span class="hljs-keyword">var</span> remoteName <span class="hljs-type">string</span><br>    <span class="hljs-keyword">var</span> chatMsg <span class="hljs-type">string</span><br> <br>    client.SelectUsers()<br>    fmt.Println(<span class="hljs-string">&quot;&gt;&gt;&gt;&gt;请输入聊天对象[用户名], exit退出:&quot;</span>)<br>    fmt.Scanln(&amp;remoteName)<br> <br>    <span class="hljs-keyword">for</span> remoteName != <span class="hljs-string">&quot;exit&quot;</span> &#123;<br>        fmt.Println(<span class="hljs-string">&quot;&gt;&gt;&gt;&gt;请输入消息内容, exit退出:&quot;</span>)<br>        fmt.Scanln(&amp;chatMsg)<br> <br>        <span class="hljs-keyword">for</span> chatMsg != <span class="hljs-string">&quot;exit&quot;</span> &#123;<br>            <span class="hljs-comment">//消息不为空则发送</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(chatMsg) != <span class="hljs-number">0</span> &#123;<br>                sendMsg := <span class="hljs-string">&quot;to|&quot;</span> + remoteName + <span class="hljs-string">&quot;|&quot;</span> + chatMsg + <span class="hljs-string">&quot;\n\n&quot;</span><br>                _, err := client.conn.Write([]<span class="hljs-type">byte</span>(sendMsg))<br>                <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>                    fmt.Println(<span class="hljs-string">&quot;conn Write err:&quot;</span>, err)<br>                    <span class="hljs-keyword">break</span><br>                &#125;<br>            &#125;<br> <br>            chatMsg = <span class="hljs-string">&quot;&quot;</span><br>            fmt.Println(<span class="hljs-string">&quot;&gt;&gt;&gt;&gt;请输入消息内容, exit退出:&quot;</span>)<br>            fmt.Scanln(&amp;chatMsg)<br>        &#125;<br> <br>        client.SelectUsers()<br>        fmt.Println(<span class="hljs-string">&quot;&gt;&gt;&gt;&gt;请输入聊天对象[用户名], exit退出:&quot;</span>)<br>        fmt.Scanln(&amp;remoteName)<br>    &#125;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(client *Client)</span></span> PublicChat() &#123;<br>    <span class="hljs-comment">//提示用户输入消息</span><br>    <span class="hljs-keyword">var</span> chatMsg <span class="hljs-type">string</span><br> <br>    fmt.Println(<span class="hljs-string">&quot;&gt;&gt;&gt;&gt;请输入聊天内容，exit退出.&quot;</span>)<br>    fmt.Scanln(&amp;chatMsg)<br> <br>    <span class="hljs-keyword">for</span> chatMsg != <span class="hljs-string">&quot;exit&quot;</span> &#123;<br>        <span class="hljs-comment">//发给服务器</span><br> <br>        <span class="hljs-comment">//消息不为空则发送</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(chatMsg) != <span class="hljs-number">0</span> &#123;<br>            sendMsg := chatMsg + <span class="hljs-string">&quot;\n&quot;</span><br>            _, err := client.conn.Write([]<span class="hljs-type">byte</span>(sendMsg))<br>            <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>                fmt.Println(<span class="hljs-string">&quot;conn Write err:&quot;</span>, err)<br>                <span class="hljs-keyword">break</span><br>            &#125;<br>        &#125;<br> <br>        chatMsg = <span class="hljs-string">&quot;&quot;</span><br>        fmt.Println(<span class="hljs-string">&quot;&gt;&gt;&gt;&gt;请输入聊天内容，exit退出.&quot;</span>)<br>        fmt.Scanln(&amp;chatMsg)<br>    &#125;<br> <br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(client *Client)</span></span> UpdateName() <span class="hljs-type">bool</span> &#123;<br> <br>    fmt.Println(<span class="hljs-string">&quot;&gt;&gt;&gt;&gt;请输入用户名:&quot;</span>)<br>    fmt.Scanln(&amp;client.Name)<br> <br>    sendMsg := <span class="hljs-string">&quot;rename|&quot;</span> + client.Name + <span class="hljs-string">&quot;\n&quot;</span><br>    _, err := client.conn.Write([]<span class="hljs-type">byte</span>(sendMsg))<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        fmt.Println(<span class="hljs-string">&quot;conn.Write err:&quot;</span>, err)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br> <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(client *Client)</span></span> Run() &#123;<br>    <span class="hljs-keyword">for</span> client.flag != <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-keyword">for</span> client.menu() != <span class="hljs-literal">true</span> &#123;<br>        &#125;<br> <br>        <span class="hljs-comment">//根据不同的模式处理不同的业务</span><br>        <span class="hljs-keyword">switch</span> client.flag &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            <span class="hljs-comment">//公聊模式</span><br>            client.PublicChat()<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            <span class="hljs-comment">//私聊模式</span><br>            client.PrivateChat()<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>            <span class="hljs-comment">//更新用户名</span><br>            client.UpdateName()<br>            <span class="hljs-keyword">break</span><br>        &#125;<br>    &#125;<br>&#125;<br> <br><span class="hljs-keyword">var</span> serverIp <span class="hljs-type">string</span><br><span class="hljs-keyword">var</span> serverPort <span class="hljs-type">int</span><br> <br><span class="hljs-comment">//./client -ip 127.0.0.1 -port 8888</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;<br>    flag.StringVar(&amp;serverIp, <span class="hljs-string">&quot;ip&quot;</span>, <span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-string">&quot;设置服务器IP地址(默认是127.0.0.1)&quot;</span>)<br>    flag.IntVar(&amp;serverPort, <span class="hljs-string">&quot;port&quot;</span>, <span class="hljs-number">8888</span>, <span class="hljs-string">&quot;设置服务器端口(默认是8888)&quot;</span>)<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">//命令行解析</span><br>    flag.Parse()<br> <br>    client := NewClient(serverIp, serverPort)<br>    <span class="hljs-keyword">if</span> client == <span class="hljs-literal">nil</span> &#123;<br>        fmt.Println(<span class="hljs-string">&quot;&gt;&gt;&gt;&gt;&gt; 链接服务器失败...&quot;</span>)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br> <br>    <span class="hljs-comment">//单独开启一个goroutine去处理server的回执消息</span><br>    <span class="hljs-keyword">go</span> client.DealResponse()<br> <br>    fmt.Println(<span class="hljs-string">&quot;&gt;&gt;&gt;&gt;&gt;链接服务器成功...&quot;</span>)<br> <br>    <span class="hljs-comment">//启动客户端的业务</span><br>    client.Run()<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>案例</tag>
      
      <tag>即时通信系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>即时通信系统-8-私聊</title>
    <link href="/2023/07/17/%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F-8-%E7%A7%81%E8%81%8A/"/>
    <url>/2023/07/17/%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F-8-%E7%A7%81%E8%81%8A/</url>
    
    <content type="html"><![CDATA[<p>#私聊功能<br>user.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br> <br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;net&quot;</span><br>    <span class="hljs-string">&quot;strings&quot;</span><br>)<br> <br><span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> &#123;<br>    Name <span class="hljs-type">string</span><br>    Addr <span class="hljs-type">string</span><br>    C    <span class="hljs-keyword">chan</span> <span class="hljs-type">string</span><br>    conn net.Conn<br> <br>    server *Server<br>&#125;<br> <br><span class="hljs-comment">//创建一个用户的API</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewUser</span><span class="hljs-params">(conn net.Conn, server *Server)</span></span> *User &#123;<br>    userAddr := conn.RemoteAddr().String()<br> <br>    user := &amp;User&#123;<br>        Name: userAddr,<br>        Addr: userAddr,<br>        C:    <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>),<br>        conn: conn,<br> <br>        server: server,<br>    &#125;<br> <br>    <span class="hljs-comment">//启动监听当前user channel消息的goroutine</span><br>    <span class="hljs-keyword">go</span> user.ListenMessage()<br> <br>    <span class="hljs-keyword">return</span> user<br>&#125;<br> <br><span class="hljs-comment">//用户的上线业务</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *User)</span></span> Online() &#123;<br> <br>    <span class="hljs-comment">//用户上线,将用户加入到onlineMap中</span><br>    this.server.mapLock.Lock()<br>    this.server.OnlineMap[this.Name] = this<br>    this.server.mapLock.Unlock()<br> <br>    <span class="hljs-comment">//广播当前用户上线消息</span><br>    this.server.BroadCast(this, <span class="hljs-string">&quot;已上线&quot;</span>)<br>&#125;<br> <br><span class="hljs-comment">//用户的下线业务</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *User)</span></span> Offline() &#123;<br> <br>    <span class="hljs-comment">//用户下线,将用户从onlineMap中删除</span><br>    this.server.mapLock.Lock()<br>    <span class="hljs-built_in">delete</span>(this.server.OnlineMap, this.Name)<br>    this.server.mapLock.Unlock()<br> <br>    <span class="hljs-comment">//广播当前用户上线消息</span><br>    this.server.BroadCast(this, <span class="hljs-string">&quot;下线&quot;</span>)<br> <br>&#125;<br> <br><span class="hljs-comment">//给当前User对应的客户端发送消息</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *User)</span></span> SendMsg(msg <span class="hljs-type">string</span>) &#123;<br>    this.conn.Write([]<span class="hljs-type">byte</span>(msg))<br>&#125;<br> <br><span class="hljs-comment">//用户处理消息的业务</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *User)</span></span> DoMessage(msg <span class="hljs-type">string</span>) &#123;<br>    <span class="hljs-keyword">if</span> msg == <span class="hljs-string">&quot;who&quot;</span> &#123;<br>        <span class="hljs-comment">//查询当前在线用户都有哪些</span><br> <br>        this.server.mapLock.Lock()<br>        <span class="hljs-keyword">for</span> _, user := <span class="hljs-keyword">range</span> this.server.OnlineMap &#123;<br>            onlineMsg := <span class="hljs-string">&quot;[&quot;</span> + user.Addr + <span class="hljs-string">&quot;]&quot;</span> + user.Name + <span class="hljs-string">&quot;:&quot;</span> + <span class="hljs-string">&quot;在线...\n&quot;</span><br>            this.SendMsg(onlineMsg)<br>        &#125;<br>        this.server.mapLock.Unlock()<br> <br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(msg) &gt; <span class="hljs-number">7</span> &amp;&amp; msg[:<span class="hljs-number">7</span>] == <span class="hljs-string">&quot;rename|&quot;</span> &#123;<br>        <span class="hljs-comment">//消息格式: rename|张三</span><br>        newName := strings.Split(msg, <span class="hljs-string">&quot;|&quot;</span>)[<span class="hljs-number">1</span>]<br> <br>        <span class="hljs-comment">//判断name是否存在</span><br>        _, ok := this.server.OnlineMap[newName]<br>        <span class="hljs-keyword">if</span> ok &#123;<br>            this.SendMsg(<span class="hljs-string">&quot;当前用户名被使用\n&quot;</span>)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            this.server.mapLock.Lock()<br>            <span class="hljs-built_in">delete</span>(this.server.OnlineMap, this.Name)<br>            this.server.OnlineMap[newName] = this<br>            this.server.mapLock.Unlock()<br> <br>            this.Name = newName<br>            this.SendMsg(<span class="hljs-string">&quot;您已经更新用户名:&quot;</span> + this.Name + <span class="hljs-string">&quot;\n&quot;</span>)<br>        &#125;<br> <br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(msg) &gt; <span class="hljs-number">4</span> &amp;&amp; msg[:<span class="hljs-number">3</span>] == <span class="hljs-string">&quot;to|&quot;</span> &#123;<br>        <span class="hljs-comment">//消息格式:  to|张三|消息内容</span><br> <br>        <span class="hljs-comment">//1 获取对方的用户名</span><br>        remoteName := strings.Split(msg, <span class="hljs-string">&quot;|&quot;</span>)[<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">if</span> remoteName == <span class="hljs-string">&quot;&quot;</span> &#123;<br>            this.SendMsg(<span class="hljs-string">&quot;消息格式不正确，请使用 \&quot;to|张三|你好啊\&quot;格式。\n&quot;</span>)<br>            <span class="hljs-keyword">return</span><br>        &#125;<br> <br>        <span class="hljs-comment">//2 根据用户名 得到对方User对象</span><br>        remoteUser, ok := this.server.OnlineMap[remoteName]<br>        <span class="hljs-keyword">if</span> !ok &#123;<br>            this.SendMsg(<span class="hljs-string">&quot;该用户名不不存在\n&quot;</span>)<br>            <span class="hljs-keyword">return</span><br>        &#125;<br> <br>        <span class="hljs-comment">//3 获取消息内容，通过对方的User对象将消息内容发送过去</span><br>        content := strings.Split(msg, <span class="hljs-string">&quot;|&quot;</span>)[<span class="hljs-number">2</span>]<br>        <span class="hljs-keyword">if</span> content == <span class="hljs-string">&quot;&quot;</span> &#123;<br>            this.SendMsg(<span class="hljs-string">&quot;无消息内容，请重发\n&quot;</span>)<br>            <span class="hljs-keyword">return</span><br>        &#125;<br>        remoteUser.SendMsg(this.Name + <span class="hljs-string">&quot;对您说:&quot;</span> + content)<br> <br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        this.server.BroadCast(this, msg)<br>    &#125;<br>&#125;<br> <br><span class="hljs-comment">//监听当前User channel的 方法,一旦有消息，就直接发送给对端客户端</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *User)</span></span> ListenMessage() &#123;<br>    <span class="hljs-keyword">for</span> &#123;<br>        msg := &lt;-this.C<br> <br>        this.conn.Write([]<span class="hljs-type">byte</span>(msg + <span class="hljs-string">&quot;\n&quot;</span>))<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>server.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br> <br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;io&quot;</span><br>    <span class="hljs-string">&quot;net&quot;</span><br>    <span class="hljs-string">&quot;sync&quot;</span><br>    <span class="hljs-string">&quot;time&quot;</span><br>)<br> <br><span class="hljs-keyword">type</span> Server <span class="hljs-keyword">struct</span> &#123;<br>    Ip   <span class="hljs-type">string</span><br>    Port <span class="hljs-type">int</span><br> <br>    <span class="hljs-comment">//在线用户的列表</span><br>    OnlineMap <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]*User<br>    mapLock   sync.RWMutex<br> <br>    <span class="hljs-comment">//消息广播的channel</span><br>    Message <span class="hljs-keyword">chan</span> <span class="hljs-type">string</span><br>&#125;<br> <br><span class="hljs-comment">//创建一个server的接口</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewServer</span><span class="hljs-params">(ip <span class="hljs-type">string</span>, port <span class="hljs-type">int</span>)</span></span> *Server &#123;<br>    server := &amp;Server&#123;<br>        Ip:        ip,<br>        Port:      port,<br>        OnlineMap: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]*User),<br>        Message:   <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>),<br>    &#125;<br> <br>    <span class="hljs-keyword">return</span> server<br>&#125;<br> <br><span class="hljs-comment">//监听Message广播消息channel的goroutine，一旦有消息就发送给全部的在线User</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *Server)</span></span> ListenMessager() &#123;<br>    <span class="hljs-keyword">for</span> &#123;<br>        msg := &lt;-this.Message<br> <br>        <span class="hljs-comment">//将msg发送给全部的在线User</span><br>        this.mapLock.Lock()<br>        <span class="hljs-keyword">for</span> _, cli := <span class="hljs-keyword">range</span> this.OnlineMap &#123;<br>            cli.C &lt;- msg<br>        &#125;<br>        this.mapLock.Unlock()<br>    &#125;<br>&#125;<br> <br><span class="hljs-comment">//广播消息的方法</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *Server)</span></span> BroadCast(user *User, msg <span class="hljs-type">string</span>) &#123;<br>    sendMsg := <span class="hljs-string">&quot;[&quot;</span> + user.Addr + <span class="hljs-string">&quot;]&quot;</span> + user.Name + <span class="hljs-string">&quot;:&quot;</span> + msg<br> <br>    this.Message &lt;- sendMsg<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *Server)</span></span> Handler(conn net.Conn) &#123;<br>    <span class="hljs-comment">//...当前链接的业务</span><br>    <span class="hljs-comment">//fmt.Println(&quot;链接建立成功&quot;)</span><br> <br>    user := NewUser(conn, this)<br> <br>    user.Online()<br> <br>    <span class="hljs-comment">//监听用户是否活跃的channel</span><br>    isLive := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">bool</span>)<br> <br>    <span class="hljs-comment">//接受客户端发送的消息</span><br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>        buf := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-number">4096</span>)<br>        <span class="hljs-keyword">for</span> &#123;<br>            n, err := conn.Read(buf)<br>            <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span> &#123;<br>                user.Offline()<br>                <span class="hljs-keyword">return</span><br>            &#125;<br> <br>            <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &amp;&amp; err != io.EOF &#123;<br>                fmt.Println(<span class="hljs-string">&quot;Conn Read err:&quot;</span>, err)<br>                <span class="hljs-keyword">return</span><br>            &#125;<br> <br>            <span class="hljs-comment">//提取用户的消息(去除&#x27;\n&#x27;)</span><br>            msg := <span class="hljs-type">string</span>(buf[:n<span class="hljs-number">-1</span>])<br> <br>            <span class="hljs-comment">//用户针对msg进行消息处理</span><br>            user.DoMessage(msg)<br> <br>            <span class="hljs-comment">//用户的任意消息，代表当前用户是一个活跃的</span><br>            isLive &lt;- <span class="hljs-literal">true</span><br>        &#125;<br>    &#125;()<br> <br>    <span class="hljs-comment">//当前handler阻塞</span><br>    <span class="hljs-keyword">for</span> &#123;<br>        <span class="hljs-keyword">select</span> &#123;<br>        <span class="hljs-keyword">case</span> &lt;-isLive:<br>            <span class="hljs-comment">//当前用户是活跃的，应该重置定时器</span><br>            <span class="hljs-comment">//不做任何事情，为了激活select，更新下面的定时器</span><br> <br>        <span class="hljs-keyword">case</span> &lt;-time.After(time.Second * <span class="hljs-number">300</span>):<br>            <span class="hljs-comment">//已经超时</span><br>            <span class="hljs-comment">//将当前的User强制的关闭</span><br> <br>            user.SendMsg(<span class="hljs-string">&quot;你被踢了&quot;</span>)<br> <br>            <span class="hljs-comment">//销毁用的资源</span><br>            <span class="hljs-built_in">close</span>(user.C)<br> <br>            <span class="hljs-comment">//关闭连接</span><br>            conn.Close()<br> <br>            <span class="hljs-comment">//退出当前Handler</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-comment">//runtime.Goexit()</span><br>        &#125;<br>    &#125;<br>&#125;<br> <br><span class="hljs-comment">//启动服务器的接口</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *Server)</span></span> Start() &#123;<br>    <span class="hljs-comment">//socket listen</span><br>    listener, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, fmt.Sprintf(<span class="hljs-string">&quot;%s:%d&quot;</span>, this.Ip, this.Port))<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        fmt.Println(<span class="hljs-string">&quot;net.Listen err:&quot;</span>, err)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-comment">//close listen socket</span><br>    <span class="hljs-keyword">defer</span> listener.Close()<br> <br>    <span class="hljs-comment">//启动监听Message的goroutine</span><br>    <span class="hljs-keyword">go</span> this.ListenMessager()<br> <br>    <span class="hljs-keyword">for</span> &#123;<br>        <span class="hljs-comment">//accept</span><br>        conn, err := listener.Accept()<br>        <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>            fmt.Println(<span class="hljs-string">&quot;listener accept err:&quot;</span>, err)<br>            <span class="hljs-keyword">continue</span><br>        &#125;<br> <br>        <span class="hljs-comment">//do handler</span><br>        <span class="hljs-keyword">go</span> this.Handler(conn)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>案例</tag>
      
      <tag>即时通信系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>即时通信系统-7-超时强踢</title>
    <link href="/2023/07/17/%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F-7-%E8%B6%85%E6%97%B6%E5%BC%BA%E8%B8%A2/"/>
    <url>/2023/07/17/%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F-7-%E8%B6%85%E6%97%B6%E5%BC%BA%E8%B8%A2/</url>
    
    <content type="html"><![CDATA[<p>#超时强踢<br>uesr.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br> <br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;net&quot;</span><br>    <span class="hljs-string">&quot;strings&quot;</span><br>)<br> <br><span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> &#123;<br>    Name <span class="hljs-type">string</span><br>    Addr <span class="hljs-type">string</span><br>    C    <span class="hljs-keyword">chan</span> <span class="hljs-type">string</span><br>    conn net.Conn<br> <br>    server *Server<br>&#125;<br> <br><span class="hljs-comment">//创建一个用户的API</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewUser</span><span class="hljs-params">(conn net.Conn, server *Server)</span></span> *User &#123;<br>    userAddr := conn.RemoteAddr().String()<br> <br>    user := &amp;User&#123;<br>        Name: userAddr,<br>        Addr: userAddr,<br>        C:    <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>),<br>        conn: conn,<br> <br>        server: server,<br>    &#125;<br> <br>    <span class="hljs-comment">//启动监听当前user channel消息的goroutine</span><br>    <span class="hljs-keyword">go</span> user.ListenMessage()<br> <br>    <span class="hljs-keyword">return</span> user<br>&#125;<br> <br><span class="hljs-comment">//用户的上线业务</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *User)</span></span> Online() &#123;<br> <br>    <span class="hljs-comment">//用户上线,将用户加入到onlineMap中</span><br>    this.server.mapLock.Lock()<br>    this.server.OnlineMap[this.Name] = this<br>    this.server.mapLock.Unlock()<br> <br>    <span class="hljs-comment">//广播当前用户上线消息</span><br>    this.server.BroadCast(this, <span class="hljs-string">&quot;已上线&quot;</span>)<br>&#125;<br> <br><span class="hljs-comment">//用户的下线业务</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *User)</span></span> Offline() &#123;<br> <br>    <span class="hljs-comment">//用户下线,将用户从onlineMap中删除</span><br>    this.server.mapLock.Lock()<br>    <span class="hljs-built_in">delete</span>(this.server.OnlineMap, this.Name)<br>    this.server.mapLock.Unlock()<br> <br>    <span class="hljs-comment">//广播当前用户上线消息</span><br>    this.server.BroadCast(this, <span class="hljs-string">&quot;下线&quot;</span>)<br> <br>&#125;<br> <br><span class="hljs-comment">//给当前User对应的客户端发送消息</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *User)</span></span> SendMsg(msg <span class="hljs-type">string</span>) &#123;<br>    this.conn.Write([]<span class="hljs-type">byte</span>(msg))<br>&#125;<br> <br><span class="hljs-comment">//用户处理消息的业务</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *User)</span></span> DoMessage(msg <span class="hljs-type">string</span>) &#123;<br>    <span class="hljs-keyword">if</span> msg == <span class="hljs-string">&quot;who&quot;</span> &#123;<br>        <span class="hljs-comment">//查询当前在线用户都有哪些</span><br> <br>        this.server.mapLock.Lock()<br>        <span class="hljs-keyword">for</span> _, user := <span class="hljs-keyword">range</span> this.server.OnlineMap &#123;<br>            onlineMsg := <span class="hljs-string">&quot;[&quot;</span> + user.Addr + <span class="hljs-string">&quot;]&quot;</span> + user.Name + <span class="hljs-string">&quot;:&quot;</span> + <span class="hljs-string">&quot;在线...\n&quot;</span><br>            this.SendMsg(onlineMsg)<br>        &#125;<br>        this.server.mapLock.Unlock()<br> <br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(msg) &gt; <span class="hljs-number">7</span> &amp;&amp; msg[:<span class="hljs-number">7</span>] == <span class="hljs-string">&quot;rename|&quot;</span> &#123;<br>        <span class="hljs-comment">//消息格式: rename|张三</span><br>        newName := strings.Split(msg, <span class="hljs-string">&quot;|&quot;</span>)[<span class="hljs-number">1</span>]<br> <br>        <span class="hljs-comment">//判断name是否存在</span><br>        _, ok := this.server.OnlineMap[newName]<br>        <span class="hljs-keyword">if</span> ok &#123;<br>            this.SendMsg(<span class="hljs-string">&quot;当前用户名被使用\n&quot;</span>)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            this.server.mapLock.Lock()<br>            <span class="hljs-built_in">delete</span>(this.server.OnlineMap, this.Name)<br>            this.server.OnlineMap[newName] = this<br>            this.server.mapLock.Unlock()<br> <br>            this.Name = newName<br>            this.SendMsg(<span class="hljs-string">&quot;您已经更新用户名:&quot;</span> + this.Name + <span class="hljs-string">&quot;\n&quot;</span>)<br>        &#125;<br> <br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        this.server.BroadCast(this, msg)<br>    &#125;<br>&#125;<br> <br><span class="hljs-comment">//监听当前User channel的 方法,一旦有消息，就直接发送给对端客户端</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *User)</span></span> ListenMessage() &#123;<br>    <span class="hljs-keyword">for</span> &#123;<br>        msg := &lt;-this.C<br> <br>        this.conn.Write([]<span class="hljs-type">byte</span>(msg + <span class="hljs-string">&quot;\n&quot;</span>))<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>server.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br> <br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;io&quot;</span><br>    <span class="hljs-string">&quot;net&quot;</span><br>    <span class="hljs-string">&quot;sync&quot;</span><br>    <span class="hljs-string">&quot;time&quot;</span><br>)<br> <br><span class="hljs-keyword">type</span> Server <span class="hljs-keyword">struct</span> &#123;<br>    Ip   <span class="hljs-type">string</span><br>    Port <span class="hljs-type">int</span><br> <br>    <span class="hljs-comment">//在线用户的列表</span><br>    OnlineMap <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]*User<br>    mapLock   sync.RWMutex<br> <br>    <span class="hljs-comment">//消息广播的channel</span><br>    Message <span class="hljs-keyword">chan</span> <span class="hljs-type">string</span><br>&#125;<br> <br><span class="hljs-comment">//创建一个server的接口</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewServer</span><span class="hljs-params">(ip <span class="hljs-type">string</span>, port <span class="hljs-type">int</span>)</span></span> *Server &#123;<br>    server := &amp;Server&#123;<br>        Ip:        ip,<br>        Port:      port,<br>        OnlineMap: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]*User),<br>        Message:   <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>),<br>    &#125;<br> <br>    <span class="hljs-keyword">return</span> server<br>&#125;<br> <br><span class="hljs-comment">//监听Message广播消息channel的goroutine，一旦有消息就发送给全部的在线User</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *Server)</span></span> ListenMessager() &#123;<br>    <span class="hljs-keyword">for</span> &#123;<br>        msg := &lt;-this.Message<br> <br>        <span class="hljs-comment">//将msg发送给全部的在线User</span><br>        this.mapLock.Lock()<br>        <span class="hljs-keyword">for</span> _, cli := <span class="hljs-keyword">range</span> this.OnlineMap &#123;<br>            cli.C &lt;- msg<br>        &#125;<br>        this.mapLock.Unlock()<br>    &#125;<br>&#125;<br> <br><span class="hljs-comment">//广播消息的方法</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *Server)</span></span> BroadCast(user *User, msg <span class="hljs-type">string</span>) &#123;<br>    sendMsg := <span class="hljs-string">&quot;[&quot;</span> + user.Addr + <span class="hljs-string">&quot;]&quot;</span> + user.Name + <span class="hljs-string">&quot;:&quot;</span> + msg<br> <br>    this.Message &lt;- sendMsg<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *Server)</span></span> Handler(conn net.Conn) &#123;<br>    <span class="hljs-comment">//...当前链接的业务</span><br>    <span class="hljs-comment">//fmt.Println(&quot;链接建立成功&quot;)</span><br> <br>    user := NewUser(conn, this)<br> <br>    user.Online()<br> <br>    <span class="hljs-comment">//监听用户是否活跃的channel</span><br>    isLive := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">bool</span>)<br> <br>    <span class="hljs-comment">//接受客户端发送的消息</span><br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>        buf := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-number">4096</span>)<br>        <span class="hljs-keyword">for</span> &#123;<br>            n, err := conn.Read(buf)<br>            <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span> &#123;<br>                user.Offline()<br>                <span class="hljs-keyword">return</span><br>            &#125;<br> <br>            <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &amp;&amp; err != io.EOF &#123;<br>                fmt.Println(<span class="hljs-string">&quot;Conn Read err:&quot;</span>, err)<br>                <span class="hljs-keyword">return</span><br>            &#125;<br> <br>            <span class="hljs-comment">//提取用户的消息(去除&#x27;\n&#x27;)</span><br>            msg := <span class="hljs-type">string</span>(buf[:n<span class="hljs-number">-1</span>])<br> <br>            <span class="hljs-comment">//用户针对msg进行消息处理</span><br>            user.DoMessage(msg)<br> <br>            <span class="hljs-comment">//用户的任意消息，代表当前用户是一个活跃的</span><br>            isLive &lt;- <span class="hljs-literal">true</span><br>        &#125;<br>    &#125;()<br> <br>    <span class="hljs-comment">//当前handler阻塞</span><br>    <span class="hljs-keyword">for</span> &#123;<br>        <span class="hljs-keyword">select</span> &#123;<br>        <span class="hljs-keyword">case</span> &lt;-isLive:<br>            <span class="hljs-comment">//当前用户是活跃的，应该重置定时器</span><br>            <span class="hljs-comment">//不做任何事情，为了激活select，更新下面的定时器</span><br> <br>        <span class="hljs-keyword">case</span> &lt;-time.After(time.Second * <span class="hljs-number">10</span>):<br>            <span class="hljs-comment">//已经超时</span><br>            <span class="hljs-comment">//将当前的User强制的关闭</span><br> <br>            user.SendMsg(<span class="hljs-string">&quot;你被踢了&quot;</span>)<br> <br>            <span class="hljs-comment">//销毁用的资源</span><br>            <span class="hljs-built_in">close</span>(user.C)<br> <br>            <span class="hljs-comment">//关闭连接</span><br>            conn.Close()<br> <br>            <span class="hljs-comment">//退出当前Handler</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-comment">//runtime.Goexit()</span><br>        &#125;<br>    &#125;<br>&#125;<br> <br><span class="hljs-comment">//启动服务器的接口</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *Server)</span></span> Start() &#123;<br>    <span class="hljs-comment">//socket listen</span><br>    listener, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, fmt.Sprintf(<span class="hljs-string">&quot;%s:%d&quot;</span>, this.Ip, this.Port))<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        fmt.Println(<span class="hljs-string">&quot;net.Listen err:&quot;</span>, err)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-comment">//close listen socket</span><br>    <span class="hljs-keyword">defer</span> listener.Close()<br> <br>    <span class="hljs-comment">//启动监听Message的goroutine</span><br>    <span class="hljs-keyword">go</span> this.ListenMessager()<br> <br>    <span class="hljs-keyword">for</span> &#123;<br>        <span class="hljs-comment">//accept</span><br>        conn, err := listener.Accept()<br>        <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>            fmt.Println(<span class="hljs-string">&quot;listener accept err:&quot;</span>, err)<br>            <span class="hljs-keyword">continue</span><br>        &#125;<br> <br>        <span class="hljs-comment">//do handler</span><br>        <span class="hljs-keyword">go</span> this.Handler(conn)<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>案例</tag>
      
      <tag>即时通信系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>即时通信系统-6-修改用户名</title>
    <link href="/2023/07/17/%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F-6-%E4%BF%AE%E6%94%B9%E7%94%A8%E6%88%B7%E5%90%8D/"/>
    <url>/2023/07/17/%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F-6-%E4%BF%AE%E6%94%B9%E7%94%A8%E6%88%B7%E5%90%8D/</url>
    
    <content type="html"><![CDATA[<p>#修改用户名</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br> <br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;net&quot;</span><br>    <span class="hljs-string">&quot;strings&quot;</span><br>)<br> <br><span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> &#123;<br>    Name <span class="hljs-type">string</span><br>    Addr <span class="hljs-type">string</span><br>    C    <span class="hljs-keyword">chan</span> <span class="hljs-type">string</span><br>    conn net.Conn<br> <br>    server *Server<br>&#125;<br> <br><span class="hljs-comment">//创建一个用户的API</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewUser</span><span class="hljs-params">(conn net.Conn, server *Server)</span></span> *User &#123;<br>    userAddr := conn.RemoteAddr().String()<br> <br>    user := &amp;User&#123;<br>        Name: userAddr,<br>        Addr: userAddr,<br>        C:    <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>),<br>        conn: conn,<br> <br>        server: server,<br>    &#125;<br> <br>    <span class="hljs-comment">//启动监听当前user channel消息的goroutine</span><br>    <span class="hljs-keyword">go</span> user.ListenMessage()<br> <br>    <span class="hljs-keyword">return</span> user<br>&#125;<br> <br><span class="hljs-comment">//用户的上线业务</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *User)</span></span> Online() &#123;<br> <br>    <span class="hljs-comment">//用户上线,将用户加入到onlineMap中</span><br>    this.server.mapLock.Lock()<br>    this.server.OnlineMap[this.Name] = this<br>    this.server.mapLock.Unlock()<br> <br>    <span class="hljs-comment">//广播当前用户上线消息</span><br>    this.server.BroadCast(this, <span class="hljs-string">&quot;已上线&quot;</span>)<br>&#125;<br> <br><span class="hljs-comment">//用户的下线业务</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *User)</span></span> Offline() &#123;<br> <br>    <span class="hljs-comment">//用户下线,将用户从onlineMap中删除</span><br>    this.server.mapLock.Lock()<br>    <span class="hljs-built_in">delete</span>(this.server.OnlineMap, this.Name)<br>    this.server.mapLock.Unlock()<br> <br>    <span class="hljs-comment">//广播当前用户上线消息</span><br>    this.server.BroadCast(this, <span class="hljs-string">&quot;下线&quot;</span>)<br> <br>&#125;<br> <br><span class="hljs-comment">//给当前User对应的客户端发送消息</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *User)</span></span> SendMsg(msg <span class="hljs-type">string</span>) &#123;<br>    this.conn.Write([]<span class="hljs-type">byte</span>(msg))<br>&#125;<br> <br><span class="hljs-comment">//用户处理消息的业务</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *User)</span></span> DoMessage(msg <span class="hljs-type">string</span>) &#123;<br>    <span class="hljs-keyword">if</span> msg == <span class="hljs-string">&quot;who&quot;</span> &#123;<br>        <span class="hljs-comment">//查询当前在线用户都有哪些</span><br> <br>        this.server.mapLock.Lock()<br>        <span class="hljs-keyword">for</span> _, user := <span class="hljs-keyword">range</span> this.server.OnlineMap &#123;<br>            onlineMsg := <span class="hljs-string">&quot;[&quot;</span> + user.Addr + <span class="hljs-string">&quot;]&quot;</span> + user.Name + <span class="hljs-string">&quot;:&quot;</span> + <span class="hljs-string">&quot;在线...\n&quot;</span><br>            this.SendMsg(onlineMsg)<br>        &#125;<br>        this.server.mapLock.Unlock()<br> <br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(msg) &gt; <span class="hljs-number">7</span> &amp;&amp; msg[:<span class="hljs-number">7</span>] == <span class="hljs-string">&quot;rename|&quot;</span> &#123;<br>        <span class="hljs-comment">//消息格式: rename|张三</span><br>        newName := strings.Split(msg, <span class="hljs-string">&quot;|&quot;</span>)[<span class="hljs-number">1</span>]<br> <br>        <span class="hljs-comment">//判断name是否存在</span><br>        _, ok := this.server.OnlineMap[newName]<br>        <span class="hljs-keyword">if</span> ok &#123;<br>            this.SendMsg(<span class="hljs-string">&quot;当前用户名被使用\n&quot;</span>)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            this.server.mapLock.Lock()<br>            <span class="hljs-built_in">delete</span>(this.server.OnlineMap, this.Name)<br>            this.server.OnlineMap[newName] = this<br>            this.server.mapLock.Unlock()<br> <br>            this.Name = newName<br>            this.SendMsg(<span class="hljs-string">&quot;您已经更新用户名:&quot;</span> + this.Name + <span class="hljs-string">&quot;\n&quot;</span>)<br>        &#125;<br> <br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        this.server.BroadCast(this, msg)<br>    &#125;<br>&#125;<br> <br><span class="hljs-comment">//监听当前User channel的 方法,一旦有消息，就直接发送给对端客户端</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *User)</span></span> ListenMessage() &#123;<br>    <span class="hljs-keyword">for</span> &#123;<br>        msg := &lt;-this.C<br> <br>        this.conn.Write([]<span class="hljs-type">byte</span>(msg + <span class="hljs-string">&quot;\n&quot;</span>))<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>server.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br> <br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;io&quot;</span><br>    <span class="hljs-string">&quot;net&quot;</span><br>    <span class="hljs-string">&quot;sync&quot;</span><br>)<br> <br><span class="hljs-keyword">type</span> Server <span class="hljs-keyword">struct</span> &#123;<br>    Ip   <span class="hljs-type">string</span><br>    Port <span class="hljs-type">int</span><br> <br>    <span class="hljs-comment">//在线用户的列表</span><br>    OnlineMap <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]*User<br>    mapLock   sync.RWMutex<br> <br>    <span class="hljs-comment">//消息广播的channel</span><br>    Message <span class="hljs-keyword">chan</span> <span class="hljs-type">string</span><br>&#125;<br> <br><span class="hljs-comment">//创建一个server的接口</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewServer</span><span class="hljs-params">(ip <span class="hljs-type">string</span>, port <span class="hljs-type">int</span>)</span></span> *Server &#123;<br>    server := &amp;Server&#123;<br>        Ip:        ip,<br>        Port:      port,<br>        OnlineMap: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]*User),<br>        Message:   <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>),<br>    &#125;<br> <br>    <span class="hljs-keyword">return</span> server<br>&#125;<br> <br><span class="hljs-comment">//监听Message广播消息channel的goroutine，一旦有消息就发送给全部的在线User</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *Server)</span></span> ListenMessager() &#123;<br>    <span class="hljs-keyword">for</span> &#123;<br>        msg := &lt;-this.Message<br> <br>        <span class="hljs-comment">//将msg发送给全部的在线User</span><br>        this.mapLock.Lock()<br>        <span class="hljs-keyword">for</span> _, cli := <span class="hljs-keyword">range</span> this.OnlineMap &#123;<br>            cli.C &lt;- msg<br>        &#125;<br>        this.mapLock.Unlock()<br>    &#125;<br>&#125;<br> <br><span class="hljs-comment">//广播消息的方法</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *Server)</span></span> BroadCast(user *User, msg <span class="hljs-type">string</span>) &#123;<br>    sendMsg := <span class="hljs-string">&quot;[&quot;</span> + user.Addr + <span class="hljs-string">&quot;]&quot;</span> + user.Name + <span class="hljs-string">&quot;:&quot;</span> + msg<br> <br>    this.Message &lt;- sendMsg<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *Server)</span></span> Handler(conn net.Conn) &#123;<br>    <span class="hljs-comment">//...当前链接的业务</span><br>    <span class="hljs-comment">//fmt.Println(&quot;链接建立成功&quot;)</span><br> <br>    user := NewUser(conn, this)<br> <br>    user.Online()<br> <br>    <span class="hljs-comment">//接受客户端发送的消息</span><br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>        buf := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-number">4096</span>)<br>        <span class="hljs-keyword">for</span> &#123;<br>            n, err := conn.Read(buf)<br>            <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span> &#123;<br>                user.Offline()<br>                <span class="hljs-keyword">return</span><br>            &#125;<br> <br>            <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &amp;&amp; err != io.EOF &#123;<br>                fmt.Println(<span class="hljs-string">&quot;Conn Read err:&quot;</span>, err)<br>                <span class="hljs-keyword">return</span><br>            &#125;<br> <br>            <span class="hljs-comment">//提取用户的消息(去除&#x27;\n&#x27;)</span><br>            msg := <span class="hljs-type">string</span>(buf[:n<span class="hljs-number">-1</span>])<br> <br>            <span class="hljs-comment">//用户针对msg进行消息处理</span><br>            user.DoMessage(msg)<br>        &#125;<br>    &#125;()<br> <br>    <span class="hljs-comment">//当前handler阻塞</span><br>    <span class="hljs-keyword">select</span> &#123;&#125;<br>&#125;<br> <br><span class="hljs-comment">//启动服务器的接口</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *Server)</span></span> Start() &#123;<br>    <span class="hljs-comment">//socket listen</span><br>    listener, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, fmt.Sprintf(<span class="hljs-string">&quot;%s:%d&quot;</span>, this.Ip, this.Port))<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        fmt.Println(<span class="hljs-string">&quot;net.Listen err:&quot;</span>, err)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-comment">//close listen socket</span><br>    <span class="hljs-keyword">defer</span> listener.Close()<br> <br>    <span class="hljs-comment">//启动监听Message的goroutine</span><br>    <span class="hljs-keyword">go</span> this.ListenMessager()<br> <br>    <span class="hljs-keyword">for</span> &#123;<br>        <span class="hljs-comment">//accept</span><br>        conn, err := listener.Accept()<br>        <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>            fmt.Println(<span class="hljs-string">&quot;listener accept err:&quot;</span>, err)<br>            <span class="hljs-keyword">continue</span><br>        &#125;<br> <br>        <span class="hljs-comment">//do handler</span><br>        <span class="hljs-keyword">go</span> this.Handler(conn)<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>案例</tag>
      
      <tag>即时通信系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>即时通信系统-5-在线用户查询</title>
    <link href="/2023/07/17/%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F-5-%E5%9C%A8%E7%BA%BF%E7%94%A8%E6%88%B7%E6%9F%A5%E8%AF%A2/"/>
    <url>/2023/07/17/%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F-5-%E5%9C%A8%E7%BA%BF%E7%94%A8%E6%88%B7%E6%9F%A5%E8%AF%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="在线用户查询"><a href="#在线用户查询" class="headerlink" title="在线用户查询"></a>在线用户查询</h1><p>user.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br> <br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;net&quot;</span><br> <br><span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> &#123;<br>    Name <span class="hljs-type">string</span><br>    Addr <span class="hljs-type">string</span><br>    C    <span class="hljs-keyword">chan</span> <span class="hljs-type">string</span><br>    conn net.Conn<br> <br>    server *Server<br>&#125;<br> <br><span class="hljs-comment">//创建一个用户的API</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewUser</span><span class="hljs-params">(conn net.Conn, server *Server)</span></span> *User &#123;<br>    userAddr := conn.RemoteAddr().String()<br> <br>    user := &amp;User&#123;<br>        Name: userAddr,<br>        Addr: userAddr,<br>        C:    <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>),<br>        conn: conn,<br> <br>        server: server,<br>    &#125;<br> <br>    <span class="hljs-comment">//启动监听当前user channel消息的goroutine</span><br>    <span class="hljs-keyword">go</span> user.ListenMessage()<br> <br>    <span class="hljs-keyword">return</span> user<br>&#125;<br> <br><span class="hljs-comment">//用户的上线业务</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *User)</span></span> Online() &#123;<br> <br>    <span class="hljs-comment">//用户上线,将用户加入到onlineMap中</span><br>    this.server.mapLock.Lock()<br>    this.server.OnlineMap[this.Name] = this<br>    this.server.mapLock.Unlock()<br> <br>    <span class="hljs-comment">//广播当前用户上线消息</span><br>    this.server.BroadCast(this, <span class="hljs-string">&quot;已上线&quot;</span>)<br>&#125;<br> <br><span class="hljs-comment">//用户的下线业务</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *User)</span></span> Offline() &#123;<br> <br>    <span class="hljs-comment">//用户下线,将用户从onlineMap中删除</span><br>    this.server.mapLock.Lock()<br>    <span class="hljs-built_in">delete</span>(this.server.OnlineMap, this.Name)<br>    this.server.mapLock.Unlock()<br> <br>    <span class="hljs-comment">//广播当前用户上线消息</span><br>    this.server.BroadCast(this, <span class="hljs-string">&quot;下线&quot;</span>)<br> <br>&#125;<br> <br><span class="hljs-comment">//给当前User对应的客户端发送消息</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *User)</span></span> SendMsg(msg <span class="hljs-type">string</span>) &#123;<br>    this.conn.Write([]<span class="hljs-type">byte</span>(msg))<br>&#125;<br> <br><span class="hljs-comment">//用户处理消息的业务</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *User)</span></span> DoMessage(msg <span class="hljs-type">string</span>) &#123;<br>    <span class="hljs-keyword">if</span> msg == <span class="hljs-string">&quot;who&quot;</span> &#123;<br>        <span class="hljs-comment">//查询当前在线用户都有哪些</span><br> <br>        this.server.mapLock.Lock()<br>        <span class="hljs-keyword">for</span> _, user := <span class="hljs-keyword">range</span> this.server.OnlineMap &#123;<br>            onlineMsg := <span class="hljs-string">&quot;[&quot;</span> + user.Addr + <span class="hljs-string">&quot;]&quot;</span> + user.Name + <span class="hljs-string">&quot;:&quot;</span> + <span class="hljs-string">&quot;在线...\n&quot;</span><br>            this.SendMsg(onlineMsg)<br>        &#125;<br>        this.server.mapLock.Unlock()<br> <br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        this.server.BroadCast(this, msg)<br>    &#125;<br>&#125;<br> <br><span class="hljs-comment">//监听当前User channel的 方法,一旦有消息，就直接发送给对端客户端</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *User)</span></span> ListenMessage() &#123;<br>    <span class="hljs-keyword">for</span> &#123;<br>        msg := &lt;-this.C<br> <br>        this.conn.Write([]<span class="hljs-type">byte</span>(msg + <span class="hljs-string">&quot;\n&quot;</span>))<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>server.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br> <br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;io&quot;</span><br>    <span class="hljs-string">&quot;net&quot;</span><br>    <span class="hljs-string">&quot;sync&quot;</span><br>)<br> <br><span class="hljs-keyword">type</span> Server <span class="hljs-keyword">struct</span> &#123;<br>    Ip   <span class="hljs-type">string</span><br>    Port <span class="hljs-type">int</span><br> <br>    <span class="hljs-comment">//在线用户的列表</span><br>    OnlineMap <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]*User<br>    mapLock   sync.RWMutex<br> <br>    <span class="hljs-comment">//消息广播的channel</span><br>    Message <span class="hljs-keyword">chan</span> <span class="hljs-type">string</span><br>&#125;<br> <br><span class="hljs-comment">//创建一个server的接口</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewServer</span><span class="hljs-params">(ip <span class="hljs-type">string</span>, port <span class="hljs-type">int</span>)</span></span> *Server &#123;<br>    server := &amp;Server&#123;<br>        Ip:        ip,<br>        Port:      port,<br>        OnlineMap: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]*User),<br>        Message:   <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>),<br>    &#125;<br> <br>    <span class="hljs-keyword">return</span> server<br>&#125;<br> <br><span class="hljs-comment">//监听Message广播消息channel的goroutine，一旦有消息就发送给全部的在线User</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *Server)</span></span> ListenMessager() &#123;<br>    <span class="hljs-keyword">for</span> &#123;<br>        msg := &lt;-this.Message<br> <br>        <span class="hljs-comment">//将msg发送给全部的在线User</span><br>        this.mapLock.Lock()<br>        <span class="hljs-keyword">for</span> _, cli := <span class="hljs-keyword">range</span> this.OnlineMap &#123;<br>            cli.C &lt;- msg<br>        &#125;<br>        this.mapLock.Unlock()<br>    &#125;<br>&#125;<br> <br><span class="hljs-comment">//广播消息的方法</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *Server)</span></span> BroadCast(user *User, msg <span class="hljs-type">string</span>) &#123;<br>    sendMsg := <span class="hljs-string">&quot;[&quot;</span> + user.Addr + <span class="hljs-string">&quot;]&quot;</span> + user.Name + <span class="hljs-string">&quot;:&quot;</span> + msg<br> <br>    this.Message &lt;- sendMsg<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *Server)</span></span> Handler(conn net.Conn) &#123;<br>    <span class="hljs-comment">//...当前链接的业务</span><br>    <span class="hljs-comment">//fmt.Println(&quot;链接建立成功&quot;)</span><br> <br>    user := NewUser(conn, this)<br> <br>    user.Online()<br> <br>    <span class="hljs-comment">//接受客户端发送的消息</span><br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>        buf := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-number">4096</span>)<br>        <span class="hljs-keyword">for</span> &#123;<br>            n, err := conn.Read(buf)<br>            <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span> &#123;<br>                user.Offline()<br>                <span class="hljs-keyword">return</span><br>            &#125;<br> <br>            <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &amp;&amp; err != io.EOF &#123;<br>                fmt.Println(<span class="hljs-string">&quot;Conn Read err:&quot;</span>, err)<br>                <span class="hljs-keyword">return</span><br>            &#125;<br> <br>            <span class="hljs-comment">//提取用户的消息(去除&#x27;\n&#x27;)</span><br>            msg := <span class="hljs-type">string</span>(buf[:n<span class="hljs-number">-1</span>])<br> <br>            <span class="hljs-comment">//用户针对msg进行消息处理</span><br>            user.DoMessage(msg)<br>        &#125;<br>    &#125;()<br> <br>    <span class="hljs-comment">//当前handler阻塞</span><br>    <span class="hljs-keyword">select</span> &#123;&#125;<br>&#125;<br> <br><span class="hljs-comment">//启动服务器的接口</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *Server)</span></span> Start() &#123;<br>    <span class="hljs-comment">//socket listen</span><br>    listener, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, fmt.Sprintf(<span class="hljs-string">&quot;%s:%d&quot;</span>, this.Ip, this.Port))<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        fmt.Println(<span class="hljs-string">&quot;net.Listen err:&quot;</span>, err)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-comment">//close listen socket</span><br>    <span class="hljs-keyword">defer</span> listener.Close()<br> <br>    <span class="hljs-comment">//启动监听Message的goroutine</span><br>    <span class="hljs-keyword">go</span> this.ListenMessager()<br> <br>    <span class="hljs-keyword">for</span> &#123;<br>        <span class="hljs-comment">//accept</span><br>        conn, err := listener.Accept()<br>        <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>            fmt.Println(<span class="hljs-string">&quot;listener accept err:&quot;</span>, err)<br>            <span class="hljs-keyword">continue</span><br>        &#125;<br> <br>        <span class="hljs-comment">//do handler</span><br>        <span class="hljs-keyword">go</span> this.Handler(conn)<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>案例</tag>
      
      <tag>即时通信系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>即时通信系统-4-用户业务封装</title>
    <link href="/2023/07/17/%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F-4-%E7%94%A8%E6%88%B7%E4%B8%9A%E5%8A%A1%E5%B0%81%E8%A3%85/"/>
    <url>/2023/07/17/%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F-4-%E7%94%A8%E6%88%B7%E4%B8%9A%E5%8A%A1%E5%B0%81%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="用户业务封装"><a href="#用户业务封装" class="headerlink" title="用户业务封装"></a>用户业务封装</h1><p>user.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br> <br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;net&quot;</span><br> <br><span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> &#123;<br>    Name <span class="hljs-type">string</span><br>    Addr <span class="hljs-type">string</span><br>    C    <span class="hljs-keyword">chan</span> <span class="hljs-type">string</span><br>    conn net.Conn<br> <br>    server *Server<br>&#125;<br> <br><span class="hljs-comment">//创建一个用户的API</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewUser</span><span class="hljs-params">(conn net.Conn, server *Server)</span></span> *User &#123;<br>    userAddr := conn.RemoteAddr().String()<br> <br>    user := &amp;User&#123;<br>        Name: userAddr,<br>        Addr: userAddr,<br>        C:    <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>),<br>        conn: conn,<br> <br>        server: server,<br>    &#125;<br> <br>    <span class="hljs-comment">//启动监听当前user channel消息的goroutine</span><br>    <span class="hljs-keyword">go</span> user.ListenMessage()<br> <br>    <span class="hljs-keyword">return</span> user<br>&#125;<br> <br><span class="hljs-comment">//用户的上线业务</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *User)</span></span> Online() &#123;<br> <br>    <span class="hljs-comment">//用户上线,将用户加入到onlineMap中</span><br>    this.server.mapLock.Lock()<br>    this.server.OnlineMap[this.Name] = this<br>    this.server.mapLock.Unlock()<br> <br>    <span class="hljs-comment">//广播当前用户上线消息</span><br>    this.server.BroadCast(this, <span class="hljs-string">&quot;已上线&quot;</span>)<br>&#125;<br> <br><span class="hljs-comment">//用户的下线业务</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *User)</span></span> Offline() &#123;<br> <br>    <span class="hljs-comment">//用户下线,将用户从onlineMap中删除</span><br>    this.server.mapLock.Lock()<br>    <span class="hljs-built_in">delete</span>(this.server.OnlineMap, this.Name)<br>    this.server.mapLock.Unlock()<br> <br>    <span class="hljs-comment">//广播当前用户上线消息</span><br>    this.server.BroadCast(this, <span class="hljs-string">&quot;下线&quot;</span>)<br> <br>&#125;<br> <br><span class="hljs-comment">//用户处理消息的业务</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *User)</span></span> DoMessage(msg <span class="hljs-type">string</span>) &#123;<br>    this.server.BroadCast(this, msg)<br>&#125;<br> <br><span class="hljs-comment">//监听当前User channel的 方法,一旦有消息，就直接发送给对端客户端</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *User)</span></span> ListenMessage() &#123;<br>    <span class="hljs-keyword">for</span> &#123;<br>        msg := &lt;-this.C<br> <br>        this.conn.Write([]<span class="hljs-type">byte</span>(msg + <span class="hljs-string">&quot;\n&quot;</span>))<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>server.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br> <br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;io&quot;</span><br>    <span class="hljs-string">&quot;net&quot;</span><br>    <span class="hljs-string">&quot;sync&quot;</span><br>)<br> <br><span class="hljs-keyword">type</span> Server <span class="hljs-keyword">struct</span> &#123;<br>    Ip   <span class="hljs-type">string</span><br>    Port <span class="hljs-type">int</span><br> <br>    <span class="hljs-comment">//在线用户的列表</span><br>    OnlineMap <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]*User<br>    mapLock   sync.RWMutex<br> <br>    <span class="hljs-comment">//消息广播的channel</span><br>    Message <span class="hljs-keyword">chan</span> <span class="hljs-type">string</span><br>&#125;<br> <br><span class="hljs-comment">//创建一个server的接口</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewServer</span><span class="hljs-params">(ip <span class="hljs-type">string</span>, port <span class="hljs-type">int</span>)</span></span> *Server &#123;<br>    server := &amp;Server&#123;<br>        Ip:        ip,<br>        Port:      port,<br>        OnlineMap: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]*User),<br>        Message:   <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>),<br>    &#125;<br> <br>    <span class="hljs-keyword">return</span> server<br>&#125;<br> <br><span class="hljs-comment">//监听Message广播消息channel的goroutine，一旦有消息就发送给全部的在线User</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *Server)</span></span> ListenMessager() &#123;<br>    <span class="hljs-keyword">for</span> &#123;<br>        msg := &lt;-this.Message<br> <br>        <span class="hljs-comment">//将msg发送给全部的在线User</span><br>        this.mapLock.Lock()<br>        <span class="hljs-keyword">for</span> _, cli := <span class="hljs-keyword">range</span> this.OnlineMap &#123;<br>            cli.C &lt;- msg<br>        &#125;<br>        this.mapLock.Unlock()<br>    &#125;<br>&#125;<br> <br><span class="hljs-comment">//广播消息的方法</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *Server)</span></span> BroadCast(user *User, msg <span class="hljs-type">string</span>) &#123;<br>    sendMsg := <span class="hljs-string">&quot;[&quot;</span> + user.Addr + <span class="hljs-string">&quot;]&quot;</span> + user.Name + <span class="hljs-string">&quot;:&quot;</span> + msg<br> <br>    this.Message &lt;- sendMsg<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *Server)</span></span> Handler(conn net.Conn) &#123;<br>    <span class="hljs-comment">//...当前链接的业务</span><br>    <span class="hljs-comment">//fmt.Println(&quot;链接建立成功&quot;)</span><br> <br>    user := NewUser(conn, this)<br> <br>    user.Online()<br> <br>    <span class="hljs-comment">//接受客户端发送的消息</span><br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>        buf := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-number">4096</span>)<br>        <span class="hljs-keyword">for</span> &#123;<br>            n, err := conn.Read(buf)<br>            <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span> &#123;<br>                user.Offline()<br>                <span class="hljs-keyword">return</span><br>            &#125;<br> <br>            <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &amp;&amp; err != io.EOF &#123;<br>                fmt.Println(<span class="hljs-string">&quot;Conn Read err:&quot;</span>, err)<br>                <span class="hljs-keyword">return</span><br>            &#125;<br> <br>            <span class="hljs-comment">//提取用户的消息(去除&#x27;\n&#x27;)</span><br>            msg := <span class="hljs-type">string</span>(buf[:n<span class="hljs-number">-1</span>])<br> <br>            <span class="hljs-comment">//用户针对msg进行消息处理</span><br>            user.DoMessage(msg)<br>        &#125;<br>    &#125;()<br> <br>    <span class="hljs-comment">//当前handler阻塞</span><br>    <span class="hljs-keyword">select</span> &#123;&#125;<br>&#125;<br> <br><span class="hljs-comment">//启动服务器的接口</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *Server)</span></span> Start() &#123;<br>    <span class="hljs-comment">//socket listen</span><br>    listener, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, fmt.Sprintf(<span class="hljs-string">&quot;%s:%d&quot;</span>, this.Ip, this.Port))<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        fmt.Println(<span class="hljs-string">&quot;net.Listen err:&quot;</span>, err)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-comment">//close listen socket</span><br>    <span class="hljs-keyword">defer</span> listener.Close()<br> <br>    <span class="hljs-comment">//启动监听Message的goroutine</span><br>    <span class="hljs-keyword">go</span> this.ListenMessager()<br> <br>    <span class="hljs-keyword">for</span> &#123;<br>        <span class="hljs-comment">//accept</span><br>        conn, err := listener.Accept()<br>        <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>            fmt.Println(<span class="hljs-string">&quot;listener accept err:&quot;</span>, err)<br>            <span class="hljs-keyword">continue</span><br>        &#125;<br> <br>        <span class="hljs-comment">//do handler</span><br>        <span class="hljs-keyword">go</span> this.Handler(conn)<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>案例</tag>
      
      <tag>即时通信系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>即时通信系统-3-用户广播</title>
    <link href="/2023/07/17/%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F-3-%E7%94%A8%E6%88%B7%E5%B9%BF%E6%92%AD/"/>
    <url>/2023/07/17/%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F-3-%E7%94%A8%E6%88%B7%E5%B9%BF%E6%92%AD/</url>
    
    <content type="html"><![CDATA[<h1 id="用户广播"><a href="#用户广播" class="headerlink" title="用户广播"></a>用户广播</h1><p>user.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br> <br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;net&quot;</span><br> <br><span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> &#123;<br>    Name <span class="hljs-type">string</span><br>    Addr <span class="hljs-type">string</span><br>    C    <span class="hljs-keyword">chan</span> <span class="hljs-type">string</span><br>    conn net.Conn<br> <br>    server *Server<br>&#125;<br> <br><span class="hljs-comment">//创建一个用户的API</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewUser</span><span class="hljs-params">(conn net.Conn, server *Server)</span></span> *User &#123;<br>    userAddr := conn.RemoteAddr().String()<br> <br>    user := &amp;User&#123;<br>        Name: userAddr,<br>        Addr: userAddr,<br>        C:    <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>),<br>        conn: conn,<br> <br>        server: server,<br>    &#125;<br> <br>    <span class="hljs-comment">//启动监听当前user channel消息的goroutine</span><br>    <span class="hljs-keyword">go</span> user.ListenMessage()<br> <br>    <span class="hljs-keyword">return</span> user<br>&#125;<br> <br><span class="hljs-comment">//用户的上线业务</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *User)</span></span> Online() &#123;<br> <br>    <span class="hljs-comment">//用户上线,将用户加入到onlineMap中</span><br>    this.server.mapLock.Lock()<br>    this.server.OnlineMap[this.Name] = this<br>    this.server.mapLock.Unlock()<br> <br>    <span class="hljs-comment">//广播当前用户上线消息</span><br>    this.server.BroadCast(this, <span class="hljs-string">&quot;已上线&quot;</span>)<br>&#125;<br> <br><span class="hljs-comment">//用户的下线业务</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *User)</span></span> Offline() &#123;<br> <br>    <span class="hljs-comment">//用户下线,将用户从onlineMap中删除</span><br>    this.server.mapLock.Lock()<br>    <span class="hljs-built_in">delete</span>(this.server.OnlineMap, this.Name)<br>    this.server.mapLock.Unlock()<br> <br>    <span class="hljs-comment">//广播当前用户上线消息</span><br>    this.server.BroadCast(this, <span class="hljs-string">&quot;下线&quot;</span>)<br> <br>&#125;<br> <br><span class="hljs-comment">//用户处理消息的业务</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *User)</span></span> DoMessage(msg <span class="hljs-type">string</span>) &#123;<br>    this.server.BroadCast(this, msg)<br>&#125;<br> <br><span class="hljs-comment">//监听当前User channel的 方法,一旦有消息，就直接发送给对端客户端</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *User)</span></span> ListenMessage() &#123;<br>    <span class="hljs-keyword">for</span> &#123;<br>        msg := &lt;-this.C<br> <br>        this.conn.Write([]<span class="hljs-type">byte</span>(msg + <span class="hljs-string">&quot;\n&quot;</span>))<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>server.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br> <br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;io&quot;</span><br>    <span class="hljs-string">&quot;net&quot;</span><br>    <span class="hljs-string">&quot;sync&quot;</span><br>)<br> <br><span class="hljs-keyword">type</span> Server <span class="hljs-keyword">struct</span> &#123;<br>    Ip   <span class="hljs-type">string</span><br>    Port <span class="hljs-type">int</span><br> <br>    <span class="hljs-comment">//在线用户的列表</span><br>    OnlineMap <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]*User<br>    mapLock   sync.RWMutex<br> <br>    <span class="hljs-comment">//消息广播的channel</span><br>    Message <span class="hljs-keyword">chan</span> <span class="hljs-type">string</span><br>&#125;<br> <br><span class="hljs-comment">//创建一个server的接口</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewServer</span><span class="hljs-params">(ip <span class="hljs-type">string</span>, port <span class="hljs-type">int</span>)</span></span> *Server &#123;<br>    server := &amp;Server&#123;<br>        Ip:        ip,<br>        Port:      port,<br>        OnlineMap: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]*User),<br>        Message:   <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>),<br>    &#125;<br> <br>    <span class="hljs-keyword">return</span> server<br>&#125;<br> <br><span class="hljs-comment">//监听Message广播消息channel的goroutine，一旦有消息就发送给全部的在线User</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *Server)</span></span> ListenMessager() &#123;<br>    <span class="hljs-keyword">for</span> &#123;<br>        msg := &lt;-this.Message<br> <br>        <span class="hljs-comment">//将msg发送给全部的在线User</span><br>        this.mapLock.Lock()<br>        <span class="hljs-keyword">for</span> _, cli := <span class="hljs-keyword">range</span> this.OnlineMap &#123;<br>            cli.C &lt;- msg<br>        &#125;<br>        this.mapLock.Unlock()<br>    &#125;<br>&#125;<br> <br><span class="hljs-comment">//广播消息的方法</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *Server)</span></span> BroadCast(user *User, msg <span class="hljs-type">string</span>) &#123;<br>    sendMsg := <span class="hljs-string">&quot;[&quot;</span> + user.Addr + <span class="hljs-string">&quot;]&quot;</span> + user.Name + <span class="hljs-string">&quot;:&quot;</span> + msg<br> <br>    this.Message &lt;- sendMsg<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *Server)</span></span> Handler(conn net.Conn) &#123;<br>    <span class="hljs-comment">//...当前链接的业务</span><br>    <span class="hljs-comment">//fmt.Println(&quot;链接建立成功&quot;)</span><br> <br>    user := NewUser(conn, this)<br> <br>    user.Online()<br> <br>    <span class="hljs-comment">//接受客户端发送的消息</span><br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>        buf := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-number">4096</span>)<br>        <span class="hljs-keyword">for</span> &#123;<br>            n, err := conn.Read(buf)<br>            <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span> &#123;<br>                user.Offline()<br>                <span class="hljs-keyword">return</span><br>            &#125;<br> <br>            <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &amp;&amp; err != io.EOF &#123;<br>                fmt.Println(<span class="hljs-string">&quot;Conn Read err:&quot;</span>, err)<br>                <span class="hljs-keyword">return</span><br>            &#125;<br> <br>            <span class="hljs-comment">//提取用户的消息(去除&#x27;\n&#x27;)</span><br>            msg := <span class="hljs-type">string</span>(buf[:n<span class="hljs-number">-1</span>])<br> <br>            <span class="hljs-comment">//用户针对msg进行消息处理</span><br>            user.DoMessage(msg)<br>        &#125;<br>    &#125;()<br> <br>    <span class="hljs-comment">//当前handler阻塞</span><br>    <span class="hljs-keyword">select</span> &#123;&#125;<br>&#125;<br> <br><span class="hljs-comment">//启动服务器的接口</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *Server)</span></span> Start() &#123;<br>    <span class="hljs-comment">//socket listen</span><br>    listener, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, fmt.Sprintf(<span class="hljs-string">&quot;%s:%d&quot;</span>, this.Ip, this.Port))<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        fmt.Println(<span class="hljs-string">&quot;net.Listen err:&quot;</span>, err)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-comment">//close listen socket</span><br>    <span class="hljs-keyword">defer</span> listener.Close()<br> <br>    <span class="hljs-comment">//启动监听Message的goroutine</span><br>    <span class="hljs-keyword">go</span> this.ListenMessager()<br> <br>    <span class="hljs-keyword">for</span> &#123;<br>        <span class="hljs-comment">//accept</span><br>        conn, err := listener.Accept()<br>        <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>            fmt.Println(<span class="hljs-string">&quot;listener accept err:&quot;</span>, err)<br>            <span class="hljs-keyword">continue</span><br>        &#125;<br> <br>        <span class="hljs-comment">//do handler</span><br>        <span class="hljs-keyword">go</span> this.Handler(conn)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>案例</tag>
      
      <tag>即时通信系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>即时通信系统-2-广播上线</title>
    <link href="/2023/07/17/%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F-2-%E5%B9%BF%E6%92%AD%E4%B8%8A%E7%BA%BF/"/>
    <url>/2023/07/17/%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F-2-%E5%B9%BF%E6%92%AD%E4%B8%8A%E7%BA%BF/</url>
    
    <content type="html"><![CDATA[<h1 id="广播上线"><a href="#广播上线" class="headerlink" title="广播上线"></a>广播上线</h1><p>user.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br> <br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;net&quot;</span><br> <br><span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> &#123;<br>    Name <span class="hljs-type">string</span><br>    Addr <span class="hljs-type">string</span><br>    C    <span class="hljs-keyword">chan</span> <span class="hljs-type">string</span><br>    conn net.Conn<br>&#125;<br> <br><span class="hljs-comment">//创建一个用户的API</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewUser</span><span class="hljs-params">(conn net.Conn)</span></span> *User &#123;<br>    userAddr := conn.RemoteAddr().String()<br> <br>    user := &amp;User&#123;<br>        Name: userAddr,<br>        Addr: userAddr,<br>        C:    <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>),<br>        conn: conn,<br>    &#125;<br> <br>    <span class="hljs-comment">//启动监听当前user channel消息的goroutine</span><br>    <span class="hljs-keyword">go</span> user.ListenMessage()<br> <br>    <span class="hljs-keyword">return</span> user<br>&#125;<br> <br><span class="hljs-comment">//监听当前User channel的 方法,一旦有消息，就直接发送给对端客户端</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *User)</span></span> ListenMessage() &#123;<br>    <span class="hljs-keyword">for</span> &#123;<br>        msg := &lt;-this.C<br> <br>        this.conn.Write([]<span class="hljs-type">byte</span>(msg + <span class="hljs-string">&quot;\n&quot;</span>))<br> <br></code></pre></td></tr></table></figure><p>server.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br> <br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;net&quot;</span><br>    <span class="hljs-string">&quot;sync&quot;</span><br>)<br> <br><span class="hljs-keyword">type</span> Server <span class="hljs-keyword">struct</span> &#123;<br>    Ip   <span class="hljs-type">string</span><br>    Port <span class="hljs-type">int</span><br> <br>    <span class="hljs-comment">//在线用户的列表</span><br>    OnlineMap <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]*User<br>    mapLock   sync.RWMutex<br> <br>    <span class="hljs-comment">//消息广播的channel</span><br>    Message <span class="hljs-keyword">chan</span> <span class="hljs-type">string</span><br>&#125;<br> <br><span class="hljs-comment">//创建一个server的接口</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewServer</span><span class="hljs-params">(ip <span class="hljs-type">string</span>, port <span class="hljs-type">int</span>)</span></span> *Server &#123;<br>    server := &amp;Server&#123;<br>        Ip:        ip,<br>        Port:      port,<br>        OnlineMap: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]*User),<br>        Message:   <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>),<br>    &#125;<br> <br>    <span class="hljs-keyword">return</span> server<br>&#125;<br> <br><span class="hljs-comment">//监听Message广播消息channel的goroutine，一旦有消息就发送给全部的在线User</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *Server)</span></span> ListenMessager() &#123;<br>    <span class="hljs-keyword">for</span> &#123;<br>        msg := &lt;-this.Message<br> <br>        <span class="hljs-comment">//将msg发送给全部的在线User</span><br>        this.mapLock.Lock()<br>        <span class="hljs-keyword">for</span> _, cli := <span class="hljs-keyword">range</span> this.OnlineMap &#123;<br>            cli.C &lt;- msg<br>        &#125;<br>        this.mapLock.Unlock()<br>    &#125;<br>&#125;<br> <br><span class="hljs-comment">//广播消息的方法</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *Server)</span></span> BroadCast(user *User, msg <span class="hljs-type">string</span>) &#123;<br>    sendMsg := <span class="hljs-string">&quot;[&quot;</span> + user.Addr + <span class="hljs-string">&quot;]&quot;</span> + user.Name + <span class="hljs-string">&quot;:&quot;</span> + msg<br> <br>    this.Message &lt;- sendMsg<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *Server)</span></span> Handler(conn net.Conn) &#123;<br>    <span class="hljs-comment">//...当前链接的业务</span><br>    <span class="hljs-comment">//fmt.Println(&quot;链接建立成功&quot;)</span><br> <br>    user := NewUser(conn)<br> <br>    <span class="hljs-comment">//用户上线,将用户加入到onlineMap中</span><br>    this.mapLock.Lock()<br>    this.OnlineMap[user.Name] = user<br>    this.mapLock.Unlock()<br> <br>    <span class="hljs-comment">//广播当前用户上线消息</span><br>    this.BroadCast(user, <span class="hljs-string">&quot;已上线&quot;</span>)<br> <br>    <span class="hljs-comment">//当前handler阻塞</span><br>    <span class="hljs-keyword">select</span> &#123;&#125;<br>&#125;<br> <br><span class="hljs-comment">//启动服务器的接口</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *Server)</span></span> Start() &#123;<br>    <span class="hljs-comment">//socket listen</span><br>    listener, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, fmt.Sprintf(<span class="hljs-string">&quot;%s:%d&quot;</span>, this.Ip, this.Port))<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        fmt.Println(<span class="hljs-string">&quot;net.Listen err:&quot;</span>, err)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-comment">//close listen socket</span><br>    <span class="hljs-keyword">defer</span> listener.Close()<br> <br>    <span class="hljs-comment">//启动监听Message的goroutine</span><br>    <span class="hljs-keyword">go</span> this.ListenMessager()<br> <br>    <span class="hljs-keyword">for</span> &#123;<br>        <span class="hljs-comment">//accept</span><br>        conn, err := listener.Accept()<br>        <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>            fmt.Println(<span class="hljs-string">&quot;listener accept err:&quot;</span>, err)<br>            <span class="hljs-keyword">continue</span><br>        &#125;<br> <br>        <span class="hljs-comment">//do handler</span><br>        <span class="hljs-keyword">go</span> this.Handler(conn)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>案例</tag>
      
      <tag>即时通信系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>即时通信系统-1-基础服务构建</title>
    <link href="/2023/07/17/%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F-1-%E5%9F%BA%E7%A1%80%E6%9C%8D%E5%8A%A1%E6%9E%84%E5%BB%BA/"/>
    <url>/2023/07/17/%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F-1-%E5%9F%BA%E7%A1%80%E6%9C%8D%E5%8A%A1%E6%9E%84%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<p>#基础服务构建</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br> <br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;net&quot;</span><br>)<br> <br><span class="hljs-keyword">type</span> Server <span class="hljs-keyword">struct</span> &#123;<br>    Ip   <span class="hljs-type">string</span><br>    Port <span class="hljs-type">int</span><br>&#125;<br> <br><span class="hljs-comment">//创建一个server的接口</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewServer</span><span class="hljs-params">(ip <span class="hljs-type">string</span>, port <span class="hljs-type">int</span>)</span></span> *Server &#123;<br>    server := &amp;Server&#123;<br>        Ip:   ip,<br>        Port: port,<br>    &#125;<br> <br>    <span class="hljs-keyword">return</span> server<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *Server)</span></span> Handler(conn net.Conn) &#123;<br>    <span class="hljs-comment">//...当前链接的业务</span><br>    fmt.Println(<span class="hljs-string">&quot;链接建立成功&quot;</span>)<br>&#125;<br> <br><span class="hljs-comment">//启动服务器的接口</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *Server)</span></span> Start() &#123;<br>    <span class="hljs-comment">//socket listen</span><br>    listener, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, fmt.Sprintf(<span class="hljs-string">&quot;%s:%d&quot;</span>, this.Ip, this.Port))<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        fmt.Println(<span class="hljs-string">&quot;net.Listen err:&quot;</span>, err)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-comment">//close listen socket</span><br>    <span class="hljs-keyword">defer</span> listener.Close()<br> <br>    <span class="hljs-keyword">for</span> &#123;<br>        <span class="hljs-comment">//accept</span><br>        conn, err := listener.Accept()<br>        <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>            fmt.Println(<span class="hljs-string">&quot;listener accept err:&quot;</span>, err)<br>            <span class="hljs-keyword">continue</span><br>        &#125;<br> <br>        <span class="hljs-comment">//do handler</span><br>        <span class="hljs-keyword">go</span> this.Handler(conn)<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>main.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br> <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    server := NewServer(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8888</span>)<br>    server.Start()<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>案例</tag>
      
      <tag>即时通信系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>即时通信系统-提纲</title>
    <link href="/2023/07/17/%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F-%E6%8F%90%E7%BA%B2/"/>
    <url>/2023/07/17/%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F-%E6%8F%90%E7%BA%B2/</url>
    
    <content type="html"><![CDATA[<p>#提纲</p><img src="/2023/07/17/%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F-%E6%8F%90%E7%BA%B2/t.png" class="" title="提纲">]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>案例</tag>
      
      <tag>即时通信系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>select</title>
    <link href="/2023/07/17/select/"/>
    <url>/2023/07/17/select/</url>
    
    <content type="html"><![CDATA[<p>#select<br>##select作用<br>select可以监听channel上的数据流动，可以实现监听多个channel，避免因为发送或者接收导致的阻塞。</p><p>与switch语句相比，select有比较多的限制，其中最大的一条限制就是每个case语句里必须是一个IO操作</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;- chan1:<br>    <span class="hljs-comment">// 如果chan1成功读到数据，则进行该case处理语句</span><br><span class="hljs-keyword">case</span> chan2 &lt;- <span class="hljs-number">1</span>:<br>    <span class="hljs-comment">// 如果成功向chan2写入数据，则进行该case处理语句</span><br><span class="hljs-keyword">default</span>:<br>    <span class="hljs-comment">// 如果上面都没有成功，则进入default处理流程</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>语法</tag>
      
      <tag>select</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>channel</title>
    <link href="/2023/07/17/channel/"/>
    <url>/2023/07/17/channel/</url>
    
    <content type="html"><![CDATA[<p>#channel<br>channel是Go的一个核心类型，可以看作管道，并发核心单元可以利用它进行发送或者接收数据进行通讯。</p><p>channel主要解决go程同步和go程之间数据共享问题。</p><p>##定义channel变量<br>channel使用make创建，使用chan关键字，Type表示channel收发数据的类型。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> Type)  <span class="hljs-comment">//等价于make(chan Type, 0)</span><br><span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> Type, capacity)<span class="hljs-comment">// capacity 带有缓冲的channel</span><br></code></pre></td></tr></table></figure><p>我们复制一个 channel或用于函数参数传递时，我们只是拷贝了一个引用，因此调用者和被调用者引用的是同一个对象。channel的零值也是nil</p><p>当 参数capacity&#x3D; 0 时，channel 是无缓冲阻塞读写的；当capacity &gt; 0 时，channel 有缓冲、是非阻塞的，直到写满 capacity个元素才阻塞写入。</p><p>channel通过操作符 &lt;- 来接收和发送数据</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">channel &lt;- value      <span class="hljs-comment">//发送value到channel</span><br>&lt;-channel             <span class="hljs-comment">//接收并将其丢弃</span><br>x := &lt;-channel        <span class="hljs-comment">//从channel中接收数据，并赋值给x</span><br>x, ok := &lt;-channel    <span class="hljs-comment">//功能同上，同时检查通道是否已关闭或者是否为空</span><br></code></pre></td></tr></table></figure><p>##关闭channel<br>可以通过内置的close函数来关闭channel</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br> <br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>)<br> <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    c := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)<br> <br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>        <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++ &#123;<br>            c &lt;- i<br>        &#125;<br>        <span class="hljs-built_in">close</span>(c)<br>    &#125;()<br> <br>    <span class="hljs-keyword">for</span> &#123;<br>        <span class="hljs-comment">//ok为true说明channel没有关闭，为false说明管道已经关闭</span><br>        <span class="hljs-keyword">if</span> data, ok := &lt;-c; ok &#123;<br>            fmt.Println(data)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">break</span><br>        &#125;<br>    &#125;<br> <br>    fmt.Println(<span class="hljs-string">&quot;Finished&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>l channel不像文件一样需要经常去关闭，只有当你确实没有任何发送数据了，或者你想显式的结束range循环之类的，才去关闭channel；</p><p>l 关闭channel后，无法向channel 再发送数据(引发 panic 错误后导致接收立即返回零值)；</p><p>l 关闭channel后，可以继续从channel接收数据；</p><p>l 对于nil channel，无论收发都会被阻塞。</p><p>可以使用range来迭代操作channel</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br> <br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>)<br> <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    c := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)<br> <br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>        <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++ &#123;<br>            c &lt;- i<br>        &#125;<br>        <span class="hljs-built_in">close</span>(c)<br>    &#125;()<br> <br>    <span class="hljs-keyword">for</span> data := <span class="hljs-keyword">range</span> c &#123;<br>        fmt.Println(data)<br>    &#125;<br>    fmt.Println(<span class="hljs-string">&quot;Finished&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>##单向channel<br>默认channel是双向的，可是指定创建单向的channel</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> ch1 <span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>       <span class="hljs-comment">// ch1是一个正常的channel，是双向的</span><br><span class="hljs-keyword">var</span> ch2 <span class="hljs-keyword">chan</span>&lt;- <span class="hljs-type">float64</span> <span class="hljs-comment">// ch2是单向channel，只用于写float64数据</span><br><span class="hljs-keyword">var</span> ch3 &lt;-<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>     <span class="hljs-comment">// ch3是单向channel，只用于读int数据</span><br></code></pre></td></tr></table></figure><p>可是将普通channel隐式转换为单向，但是不能将单转换为普通</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go">c := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>, <span class="hljs-number">3</span>)<br><span class="hljs-keyword">var</span> send <span class="hljs-keyword">chan</span>&lt;- <span class="hljs-type">int</span> = c <span class="hljs-comment">// send-only</span><br><span class="hljs-keyword">var</span> recv &lt;-<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span> = c <span class="hljs-comment">// receive-only</span><br>send &lt;- <span class="hljs-number">1</span><br><span class="hljs-comment">//&lt;-send //invalid operation: &lt;-send (receive from send-only type chan&lt;- int)</span><br>&lt;-recv<br><span class="hljs-comment">//recv &lt;- 2 //invalid operation: recv &lt;- 2 (send to receive-only type &lt;-chan int)</span><br> <br><span class="hljs-comment">//不能将单向 channel 转换为普通 channel</span><br>d1 := (<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)(send) <span class="hljs-comment">//cannot convert send (type chan&lt;- int) to type chan int</span><br>d2 := (<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)(recv) <span class="hljs-comment">//cannot convert recv (type &lt;-chan int) to type chan int</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>语法</tag>
      
      <tag>channel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>goroutine</title>
    <link href="/2023/07/17/goroutine/"/>
    <url>/2023/07/17/goroutine/</url>
    
    <content type="html"><![CDATA[<h1 id="goroutine"><a href="#goroutine" class="headerlink" title="goroutine"></a>goroutine</h1><h2 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h2><p>协程最大的优势是轻量化，可以轻松创建上万个而不会导致系统资源衰竭。也叫“轻量级线程“</p><p>一个线程可以有任意多个协程，但是某一时刻只能有一个协程运行，多个协程共享该线程分配到的计算机资源。</p><h2 id="Go-并发"><a href="#Go-并发" class="headerlink" title="Go 并发"></a>Go 并发</h2><p>Go 在语言级别支持协程，叫goroutine。Go标准库所有系统调用操作（包括所有同步IO操作），都会让出CPU给其他goroutine。所以Go的轻量化线程的切换管理不依赖于系统的线程和进程，也不需要依赖于CPU的核心数量。</p><p>Go中的并发程序主要使用两种手段来实现，分别是goroutine和channel</p><h2 id="创建goroutine"><a href="#创建goroutine" class="headerlink" title="创建goroutine"></a>创建goroutine</h2><p>只需要在函数调用语句前加上go，就可以创建并发执行单元。</p><h2 id="goroutine特性"><a href="#goroutine特性" class="headerlink" title="goroutine特性"></a>goroutine特性</h2><p>主goroutine退出后，其他的工作goroutine也会退出。<br>调用runtime.Goexit()后将立即终止当前goroutine执行，调度器确保所有已注册defer延迟调用被执行。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br> <br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;runtime&quot;</span><br>)<br> <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>        <span class="hljs-keyword">defer</span> fmt.Println(<span class="hljs-string">&quot;A.defer&quot;</span>)<br> <br>        <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>            <span class="hljs-keyword">defer</span> fmt.Println(<span class="hljs-string">&quot;B.defer&quot;</span>)<br>            runtime.Goexit() <span class="hljs-comment">// 终止当前 goroutine, import &quot;runtime&quot;</span><br>            fmt.Println(<span class="hljs-string">&quot;B&quot;</span>) <span class="hljs-comment">// 不会执行</span><br>        &#125;()<br> <br>        fmt.Println(<span class="hljs-string">&quot;A&quot;</span>) <span class="hljs-comment">// 不会执行</span><br>    &#125;()       <span class="hljs-comment">//不要忘记()</span><br> <br>    <span class="hljs-comment">//死循环，目的不让主goroutine结束</span><br>    <span class="hljs-keyword">for</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>语法</tag>
      
      <tag>goroutine</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Go Modules</title>
    <link href="/2023/07/16/Go%20Modules/"/>
    <url>/2023/07/16/Go%20Modules/</url>
    
    <content type="html"><![CDATA[<h1 id="Go-Modules"><a href="#Go-Modules" class="headerlink" title="Go Modules"></a>Go Modules</h1><p>Go在1.11之前使用GOPATH。GOPATH有几个弊端：无版本控制概念&#x2F;无法同步一致第三方版本号&#x2F;无法指定当前引用的第三方版本号。不推荐使用。<br>Go在1.14之后推荐在生产使用Go Module。</p><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>GOPROXY：设置Go模块代理，拉取模块版本的时候通过镜像站点来拉取<br>GONOPROXY&#x2F;GONOSUMDB&#x2F;GOPRIVATE：项目依赖了私有仓库时设置，直接设置GOPRIVATE，它的值将作为其余两个的默认值</p><h2 id="go-mod命令"><a href="#go-mod命令" class="headerlink" title="go mod命令"></a>go mod命令</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>go mod init</td><td>生成 go.mod 文件</td></tr><tr><td>go mod download</td><td>下载 go.mod 文件中指明的所有依赖</td></tr><tr><td>go mod tidy</td><td>整理现有的依赖</td></tr><tr><td>go mod graph</td><td>查看现有的依赖结构</td></tr><tr><td>go mod edit</td><td>编辑 go.mod 文件</td></tr><tr><td>go mod vendor</td><td>导出项目所有的依赖到vendor目录</td></tr><tr><td>go mod verify</td><td>校验一个模块是否被篡改过</td></tr><tr><td>go mod why</td><td>查看为什么需要依赖某模块</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>语法</tag>
      
      <tag>go modules</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>结构体标签</title>
    <link href="/2023/07/16/%E7%BB%93%E6%9E%84%E4%BD%93%E6%A0%87%E7%AD%BE/"/>
    <url>/2023/07/16/%E7%BB%93%E6%9E%84%E4%BD%93%E6%A0%87%E7%AD%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="结构体标签"><a href="#结构体标签" class="headerlink" title="结构体标签"></a>结构体标签</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;reflect&quot;</span><br>)<br><br><span class="hljs-comment">// 结构体标签 为了向别人提供字段的说明</span><br><span class="hljs-keyword">type</span> resume <span class="hljs-keyword">struct</span> &#123;<br>    Name <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;name&quot; doc:&quot;我的名字&quot;`</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">findDoc</span><span class="hljs-params">(stru <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span> &#123;<br>    t := reflect.TypeOf(stru).Elem()<br>    doc := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>)<br><br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; t.NumField(); i++ &#123;<br>        doc[t.Field(i).Tag.Get(<span class="hljs-string">&quot;json&quot;</span>)] = t.Field(i).Tag.Get(<span class="hljs-string">&quot;doc&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> doc<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">var</span> stru resume<br>    doc := findDoc(&amp;stru)<br>    fmt.Printf(<span class="hljs-string">&quot;name字段为：%s\n&quot;</span>, doc[<span class="hljs-string">&quot;name&quot;</span>])<br>&#125;<br></code></pre></td></tr></table></figure><p>json示例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;encoding/json&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> Movie <span class="hljs-keyword">struct</span> &#123;<br>Title  <span class="hljs-type">string</span>   <span class="hljs-string">`json:&quot;title&quot;`</span><br>Year   <span class="hljs-type">int</span>      <span class="hljs-string">`json:&quot;year&quot;`</span><br>Price  <span class="hljs-type">int</span>      <span class="hljs-string">`json:&quot;rmb&quot;`</span><br>Actors []<span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;actors&quot;`</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>movie := Movie&#123;<span class="hljs-string">&quot;喜剧之王&quot;</span>, <span class="hljs-number">2000</span>, <span class="hljs-number">10</span>, []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;zhouxingchi&quot;</span>, <span class="hljs-string">&quot;zhangbozhi&quot;</span>&#125;&#125;<br><span class="hljs-comment">//编码的过程 结构体--&gt; json</span><br>jsonStr, err := json.Marshal(movie)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;json marshal error&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;jsonStr = %s\n&quot;</span>, jsonStr)<br><br><span class="hljs-comment">//解码的过程 jsonStr --&gt; 结构体</span><br><span class="hljs-comment">//jsonStr = &#123;&quot;title&quot;:&quot;喜剧之王&quot;,&quot;year&quot;:2000,&quot;rmb&quot;:10,&quot;actors&quot;:[&quot;zhouxingchi&quot;,&quot;zhangbozhi&quot;]&#125;</span><br>myMovie := Movie&#123;&#125;<br>err = json.Unmarshal(jsonStr, &amp;myMovie)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;json unmarshal error&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;myMovie=%v\n&quot;</span>, myMovie)<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>语法</tag>
      
      <tag>结构体标签</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>反射reflect</title>
    <link href="/2023/07/16/%E5%8F%8D%E5%B0%84reflect/"/>
    <url>/2023/07/16/%E5%8F%8D%E5%B0%84reflect/</url>
    
    <content type="html"><![CDATA[<h1 id="reflect"><a href="#reflect" class="headerlink" title="reflect"></a>reflect</h1><h2 id="编程中反射的概念"><a href="#编程中反射的概念" class="headerlink" title="编程中反射的概念"></a>编程中反射的概念</h2><p>反射是指一类应用，它们能够自描述和自控制。也就是说，这类应用通过采用某种机制来实现对自己行为的描述（self-representation）和监测（examination），并能根据自身行为的状态和结果，调整或修改应用所描述行为的状态和相关的语义。<br>Golang语言实现了反射，反射机制就是在运行时动态的调用对象的方法和属性，官方自带的reflect包就是反射相关的，只要包含这个包就可以使用。</p><h2 id="interface和反射"><a href="#interface和反射" class="headerlink" title="interface和反射"></a>interface和反射</h2><p>● 变量包括（type, value）两部分<br>● type 包括 static type和concrete type. 简单来说 static type是你在编码是看见的类型(如int、string)，concrete type是runtime系统看见的类型<br>● 类型断言能否成功，取决于变量的concrete type，而不是static type. 因此，一个 reader变量如果它的concrete type也实现了write方法的话，它也可以被类型断言为writer.</p><p>反射主要与Golang的interface类型相关（它的type是concrete type），只有interface类型才有反射一说。</p><p>在Golang的实现中，每个interface变量都有一个对应pair，pair中记录了实际变量的值和类型:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">(value, <span class="hljs-keyword">type</span>)<br></code></pre></td></tr></table></figure><p>value是实际变量值，type是实际变量的类型。一个interface{}类型的变量包含了2个指针，一个指针指向值的类型【对应concrete type】，另外一个指针指向实际的值【对应value】。</p><h2 id="Golang的反射relect"><a href="#Golang的反射relect" class="headerlink" title="Golang的反射relect"></a>Golang的反射relect</h2><h3 id="ValueOf和TypeOf"><a href="#ValueOf和TypeOf" class="headerlink" title="ValueOf和TypeOf"></a>ValueOf和TypeOf</h3><p>Golang的reflect反射包提供了两种类型（两个方法）让我们可以很容易的访问接口变量内容，分别是reflect.ValueOf()和reflect.TypeOf()</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;reflect&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">var</span> num <span class="hljs-type">float64</span> = <span class="hljs-number">1.2345</span><br><br>    fmt.Println(<span class="hljs-string">&quot;type: &quot;</span>, reflect.TypeOf(num))<br>    fmt.Println(<span class="hljs-string">&quot;value: &quot;</span>, reflect.ValueOf(num))<br>&#125;<br><br>运行结果:<br><span class="hljs-keyword">type</span>:  <span class="hljs-type">float64</span><br>value:  <span class="hljs-number">1.2345</span><br></code></pre></td></tr></table></figure><h3 id="从relfect-Value中获取接口interface的信息"><a href="#从relfect-Value中获取接口interface的信息" class="headerlink" title="从relfect.Value中获取接口interface的信息"></a>从relfect.Value中获取接口interface的信息</h3><p>当执行reflect.ValueOf(interface)之后，就得到了一个类型为”relfect.Value”变量，可以通过它本身的Interface()方法获得接口变量的真实内容，然后可以通过类型判断进行转换，转换为原有真实类型。原有类型可能已知可能未知。</p><p>####已知原有类型【进行“强制转换”】<br>已知类型后转换为其对应的类型的做法如下，直接通过Interface方法然后强制转换</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">realValue := value.Interface().(已知的类型)<br><span class="hljs-number">1.</span>  转换的时候，如果转换的类型不完全符合，则直接<span class="hljs-built_in">panic</span>，类型要求非常严格！ <br><span class="hljs-number">2.</span>  转换的时候，要区分是指针还是值<br><span class="hljs-number">3.</span>  也就是说反射可以将“反射类型对象”再重新转换为“接口类型变量” <br></code></pre></td></tr></table></figure><h4 id="未知原有类型【遍历探测其Filed】"><a href="#未知原有类型【遍历探测其Filed】" class="headerlink" title="未知原有类型【遍历探测其Filed】"></a>未知原有类型【遍历探测其Filed】</h4><p>很多情况下，我们可能并不知道其具体类型，需要我们进行遍历探测其Filed来得知，示例如下:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;reflect&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> &#123;<br>    Id   <span class="hljs-type">int</span><br>    Name <span class="hljs-type">string</span><br>    Age  <span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(u User)</span></span> ReflectCallFunc() &#123;<br>    fmt.Println(<span class="hljs-string">&quot;Allen.Wu ReflectCallFunc&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>    user := User&#123;<span class="hljs-number">1</span>, <span class="hljs-string">&quot;Allen.Wu&quot;</span>, <span class="hljs-number">25</span>&#125;<br><br>    DoFiledAndMethod(user)<br><br>&#125;<br><br><span class="hljs-comment">// 通过接口来获取任意参数，然后一一揭晓</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">DoFiledAndMethod</span><span class="hljs-params">(input <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;<br><br>    getType := reflect.TypeOf(input)<br>    fmt.Println(<span class="hljs-string">&quot;get Type is :&quot;</span>, getType.Name())<br><br>    getValue := reflect.ValueOf(input)<br>    fmt.Println(<span class="hljs-string">&quot;get all Fields is:&quot;</span>, getValue)<br><br>    <span class="hljs-comment">// 获取方法字段</span><br>    <span class="hljs-comment">// 1. 先获取interface的reflect.Type，然后通过NumField进行遍历</span><br>    <span class="hljs-comment">// 2. 再通过reflect.Type的Field获取其Field</span><br>    <span class="hljs-comment">// 3. 最后通过Field的Interface()得到对应的value</span><br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; getType.NumField(); i++ &#123;<br>        field := getType.Field(i)<br>        value := getValue.Field(i).Interface()<br>        fmt.Printf(<span class="hljs-string">&quot;%s: %v = %v\n&quot;</span>, field.Name, field.Type, value)<br>    &#125;<br><br>    <span class="hljs-comment">// 获取方法</span><br>    <span class="hljs-comment">// 1. 先获取interface的reflect.Type，然后通过.NumMethod进行遍历</span><br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; getType.NumMethod(); i++ &#123;<br>        m := getType.Method(i)<br>        fmt.Printf(<span class="hljs-string">&quot;%s: %v\n&quot;</span>, m.Name, m.Type)<br>    &#125;<br>&#125;<br><br>运行结果：<br>get Type is : User<br>get all Fields is: &#123;<span class="hljs-number">1</span> Allen.Wu <span class="hljs-number">25</span>&#125;<br>Id: <span class="hljs-type">int</span> = <span class="hljs-number">1</span><br>Name: <span class="hljs-type">string</span> = Allen.Wu<br>Age: <span class="hljs-type">int</span> = <span class="hljs-number">25</span><br>ReflectCallFunc: <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(main.User)</span></span><br></code></pre></td></tr></table></figure><p>通过运行结果可以得知获取未知类型的interface的具体变量及其类型的步骤为：</p><ol><li>先获取interface的reflect.Type，然后通过NumField进行遍历</li><li>再通过reflect.Type的Field获取其Field</li><li>最后通过Field的Interface()得到对应的value</li></ol><p>通过运行结果可以得知获取未知类型的interface的所属方法（函数）的步骤为：</p><ol><li>先获取interface的reflect.Type，然后通过NumMethod进行遍历</li><li>再分别通过reflect.Type的Method获取对应的真实的方法（函数）</li><li>最后对结果取其Name和Type得知具体的方法名</li><li>也就是说反射可以将“反射类型对象”再重新转换为“接口类型变量”</li><li>struct 或者 struct 的嵌套都是一样的判断处理方式</li></ol><h3 id="通过reflect-Value设置实际变量的值"><a href="#通过reflect-Value设置实际变量的值" class="headerlink" title="通过reflect.Value设置实际变量的值"></a>通过reflect.Value设置实际变量的值</h3><p>reflect.Value是通过reflect.ValueOf(X)获得的，只有当X是指针的时候，才可以通过reflec.Value修改实际变量X的值，即：要修改反射类型的对象就一定要保证其值是“addressable”的。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;reflect&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>    <span class="hljs-keyword">var</span> num <span class="hljs-type">float64</span> = <span class="hljs-number">1.2345</span><br>    fmt.Println(<span class="hljs-string">&quot;old value of pointer:&quot;</span>, num)<br><br>    <span class="hljs-comment">// 通过reflect.ValueOf获取num中的reflect.Value，注意，参数必须是指针才能修改其值</span><br>    pointer := reflect.ValueOf(&amp;num)<br>    newValue := pointer.Elem()<br><br>    fmt.Println(<span class="hljs-string">&quot;type of pointer:&quot;</span>, newValue.Type())<br>    fmt.Println(<span class="hljs-string">&quot;settability of pointer:&quot;</span>, newValue.CanSet())<br><br>    <span class="hljs-comment">// 重新赋值</span><br>    newValue.SetFloat(<span class="hljs-number">77</span>)<br>    fmt.Println(<span class="hljs-string">&quot;new value of pointer:&quot;</span>, num)<br><br>    <span class="hljs-comment">////////////////////</span><br>    <span class="hljs-comment">// 如果reflect.ValueOf的参数不是指针，会如何？</span><br>    pointer = reflect.ValueOf(num)<br>    <span class="hljs-comment">//newValue = pointer.Elem() // 如果非指针，这里直接panic，“panic: reflect: call of reflect.Value.Elem on float64 Value”</span><br>&#125;<br><br>运行结果：<br>old value of pointer: <span class="hljs-number">1.2345</span><br><span class="hljs-keyword">type</span> of pointer: <span class="hljs-type">float64</span><br>settability of pointer: <span class="hljs-literal">true</span><br><span class="hljs-built_in">new</span> value of pointer: <span class="hljs-number">77</span><br></code></pre></td></tr></table></figure><ol><li>需要传入的参数是* float64这个指针，然后可以通过pointer.Elem()去获取所指向的Value，注意一定要是指针。</li><li>如果传入的参数不是指针，而是变量，那么<br>  ○ 通过Elem获取原始值对应的对象则直接panic<br>  ○ 通过CanSet方法查询是否可以设置返回false</li><li>newValue.CantSet()表示是否可以重新设置其值，如果输出的是true则可修改，否则不能修改，修改完之后再进行打印发现真的已经修改了。</li><li>reflect.Value.Elem() 表示获取原始值对应的反射对象，只有原始对象才能修改，当前反射对象是不能修改的</li><li>也就是说如果要修改反射类型对象，其值必须是“addressable”【对应的要传入的是指针，同时要通过Elem方法获取原始值对应的反射对象】</li><li>struct 或者 struct 的嵌套都是一样的判断处理方式</li></ol><h3 id="通过reflect-ValueOf来进行方法的调用"><a href="#通过reflect-ValueOf来进行方法的调用" class="headerlink" title="通过reflect.ValueOf来进行方法的调用"></a>通过reflect.ValueOf来进行方法的调用</h3><p>未完待续</p><p>Golang的反射很慢</p>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>语法</tag>
      
      <tag>reflect</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>interface与类型断言</title>
    <link href="/2023/07/16/interface%E4%B8%8E%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80/"/>
    <url>/2023/07/16/interface%E4%B8%8E%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80/</url>
    
    <content type="html"><![CDATA[<h1 id="interface与类型断言"><a href="#interface与类型断言" class="headerlink" title="interface与类型断言"></a>interface与类型断言</h1><p>Golang的语言中提供了断言的功能。golang中的所有程序都实现了interface{}的接口，这意味着，所有的类型如string,int,int64甚至是自定义的struct类型都就此拥有了interface{}的接口，这种做法和java中的Object类型比较类似。那么在一个数据通过func funcName(interface{})的方式传进来的时候，也就意味着这个参数被自动的转为interface{}的类型。</p><h2 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h2><p>直接断言</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> a <span class="hljs-keyword">interface</span>&#123;&#125;<br>fmt.Println(<span class="hljs-string">&quot;Where are you,Jonny?&quot;</span>, a.(<span class="hljs-type">string</span>))<br></code></pre></td></tr></table></figure><p>断言失败可能会导致panic，断言前一般先判断</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">value, ok := a.(<span class="hljs-type">string</span>) <span class="hljs-comment">// 失败时ok的值为false；成功ok的值时true，同时value返回正确的值</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>语法</tag>
      
      <tag>interface</tag>
      
      <tag>类型断言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面向对象特征</title>
    <link href="/2023/07/16/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%89%B9%E5%BE%81/"/>
    <url>/2023/07/16/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%89%B9%E5%BE%81/</url>
    
    <content type="html"><![CDATA[<h1 id="面向对象特征"><a href="#面向对象特征" class="headerlink" title="面向对象特征"></a>面向对象特征</h1><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>给结构体定义方法时如果接受者是指针类型的，函数中的操作会影响到结构体。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><br><span class="hljs-comment">//定义一个结构体</span><br><span class="hljs-keyword">type</span> T <span class="hljs-keyword">struct</span> &#123;<br>    name <span class="hljs-type">string</span><br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t T)</span></span> method1() &#123;<br>    t.name = <span class="hljs-string">&quot;new name1&quot;</span><br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t *T)</span></span> method2() &#123;<br>    t.name = <span class="hljs-string">&quot;new name2&quot;</span><br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br><br>    t := T&#123;<span class="hljs-string">&quot;old name&quot;</span>&#125;<br><br><br>    fmt.Println(<span class="hljs-string">&quot;method1 调用前 &quot;</span>, t.name)<br>    t.method1()<br>    fmt.Println(<span class="hljs-string">&quot;method1 调用后 &quot;</span>, t.name)<br><br><br>    fmt.Println(<span class="hljs-string">&quot;method2 调用前 &quot;</span>, t.name)<br>    t.method2()<br>    fmt.Println(<span class="hljs-string">&quot;method2 调用后 &quot;</span>, t.name)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">method1 调用前  old name<br>method1 调用后  old name<br>method2 调用前  old name<br>method2 调用后  new name2<br></code></pre></td></tr></table></figure><h2 id="方法值"><a href="#方法值" class="headerlink" title="方法值"></a>方法值</h2><p>将一个结构体的方法分两步执行，第一步先将方法赋值给一个变量，成为方法值。之后调用时不需要再指定接收器，只需要传入参数即可。<br>如p.Distance()，将p.Distance传给一个变量distanceFormP，然后调用distanceFormP(otherPoint)</p>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>语法</tag>
      
      <tag>面向对象特征</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>slice和map</title>
    <link href="/2023/07/15/slice%E5%92%8Cmap/"/>
    <url>/2023/07/15/slice%E5%92%8Cmap/</url>
    
    <content type="html"><![CDATA[<h1 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h1><p>Go切片是对数组的抽象</p><p>Go使用<code>var myArr1 [10]int</code>声明的数组是固定数组，长度不可改变，不适用于某些场景。Go提供了内置类型切片（“动态数组”），切片的长度不固定，追加元素超过切片容量后切片的容量会增大。</p><h2 id="定义切片"><a href="#定义切片" class="headerlink" title="定义切片"></a>定义切片</h2><p>声明一个未制定大小的数组就是一个切片，但是没有分配空间</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> identifier []<span class="hljs-keyword">type</span><br></code></pre></td></tr></table></figure><p>使用make()函数在声明的时候分配空间</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> slice1 []<span class="hljs-keyword">type</span> = <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">type</span>, <span class="hljs-built_in">len</span>)<br><br>也可以简写为<br><br>slice1 := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">type</span>, <span class="hljs-built_in">len</span>)<br></code></pre></td></tr></table></figure><p>可选参数capacity制定切片容量<code>make([]T, length, capacity)</code>不指定capacity时len&#x3D;cap  <br>len是数组的长度，也是切片的初始长度。</p><h2 id="切片初始化"><a href="#切片初始化" class="headerlink" title="切片初始化"></a>切片初始化</h2><p>直接初始化，值为1，2，3，len&#x3D;cap&#x3D;3</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">s := []<span class="hljs-type">int</span> &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;<br></code></pre></td></tr></table></figure><p>根据其他数组或切片来初始化</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// startIndex/endIndex可选</span><br>s1 := s[startIndex:endIndex] <br></code></pre></td></tr></table></figure><h2 id="len-和cap-函数"><a href="#len-和cap-函数" class="headerlink" title="len()和cap()函数"></a>len()和cap()函数</h2><p>可以使用len()测量切片目前的长度，使用cap()测量切片目前的最大容量。</p><h2 id="空切片"><a href="#空切片" class="headerlink" title="空切片"></a>空切片</h2><p>未初始化的切片默认等于nil，长度和容量为0</p><h2 id="append-函数-和-copy-函数"><a href="#append-函数-和-copy-函数" class="headerlink" title="append()函数 和 copy() 函数"></a>append()函数 和 copy() 函数</h2><p>append()向切片（包括空切片）中追加元素，copy()复制原来的切片到新切片</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>   <span class="hljs-keyword">var</span> numbers []<span class="hljs-type">int</span><br>   printSlice(numbers)<br><br><br>   <span class="hljs-comment">/* 允许追加空切片 */</span><br>   numbers = <span class="hljs-built_in">append</span>(numbers, <span class="hljs-number">0</span>)<br>   printSlice(numbers)<br><br><br>   <span class="hljs-comment">/* 向切片添加一个元素 */</span><br>   numbers = <span class="hljs-built_in">append</span>(numbers, <span class="hljs-number">1</span>)<br>   printSlice(numbers)<br><br><br>   <span class="hljs-comment">/* 同时添加多个元素 */</span><br>   numbers = <span class="hljs-built_in">append</span>(numbers, <span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)<br>   printSlice(numbers)<br><br><br>   <span class="hljs-comment">/* 创建切片 numbers1 是之前切片的两倍容量*/</span><br>   numbers1 := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-built_in">len</span>(numbers), (<span class="hljs-built_in">cap</span>(numbers))*<span class="hljs-number">2</span>)<br><br><br>   <span class="hljs-comment">/* 拷贝 numbers 的内容到 numbers1 */</span><br>   <span class="hljs-built_in">copy</span>(numbers1,numbers)<br>   printSlice(numbers1)   <br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">printSlice</span><span class="hljs-params">(x []<span class="hljs-type">int</span>)</span></span>&#123;<br>   fmt.Printf(<span class="hljs-string">&quot;len=%d cap=%d slice=%v\n&quot;</span>,<span class="hljs-built_in">len</span>(x),<span class="hljs-built_in">cap</span>(x),x)<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">len=0 cap=0 slice=[]<br>len=1 cap=1 slice=[0]<br>len=2 cap=2 slice=[0 1]<br>len=5 cap=6 slice=[0 1 2 3 4]<br>len=5 cap=12 slice=[0 1 2 3 4]<br></code></pre></td></tr></table></figure><p>思考：为什么同时添加2，3，4后，len从2增加到了5，cap增加到了6？</p><h1 id="map"><a href="#map" class="headerlink" title="map"></a>map</h1><p>map和slice类似，只不过数据结构不同</p><h2 id="声明map"><a href="#声明map" class="headerlink" title="声明map"></a>声明map</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//第一种</span><br><span class="hljs-keyword">var</span> test1 <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span><br><span class="hljs-comment">// 使用map前需要先make分配数据空间</span><br>test1 = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>, <span class="hljs-number">10</span>)<br>test1[<span class="hljs-string">&quot;one&quot;</span>] = <span class="hljs-string">&quot;php&quot;</span><br>test1[<span class="hljs-string">&quot;two&quot;</span>] = <span class="hljs-string">&quot;golang&quot;</span><br><br><span class="hljs-comment">// 第二种</span><br>test2 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>)<br>test1[<span class="hljs-string">&quot;one&quot;</span>] = <span class="hljs-string">&quot;php&quot;</span><br>test1[<span class="hljs-string">&quot;two&quot;</span>] = <span class="hljs-string">&quot;golang&quot;</span><br><br><span class="hljs-comment">// 第三种</span><br>test3 := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>&#123;<br>    <span class="hljs-string">&quot;one&quot;</span>: <span class="hljs-string">&quot;php&quot;</span>,<br>    <span class="hljs-string">&quot;two&quot;</span>: <span class="hljs-string">&quot;golang&quot;</span>,<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>语法</tag>
      
      <tag>slice</tag>
      
      <tag>map</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>defer</title>
    <link href="/2023/07/15/defer/"/>
    <url>/2023/07/15/defer/</url>
    
    <content type="html"><![CDATA[<h1 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h1><p>defer语句在函数运行结束之后才运行，被defer语句调用的函数称为延迟函数<br>defer压栈运行，多个defer以后进先出的顺序执行。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Demo</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">defer</span> fmt.Println(<span class="hljs-string">&quot;1&quot;</span>)<br><span class="hljs-keyword">defer</span> fmt.Println(<span class="hljs-string">&quot;2&quot;</span>)<br><span class="hljs-keyword">defer</span> fmt.Println(<span class="hljs-string">&quot;3&quot;</span>)<br><span class="hljs-keyword">defer</span> fmt.Println(<span class="hljs-string">&quot;4&quot;</span>)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>Demo()<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">4<br>3<br>2<br>1<br></code></pre></td></tr></table></figure><p>defer作用：</p><p>● 释放占用的资源<br>● 捕捉处理异常<br>● 输出日志</p><h2 id="recover错误拦截"><a href="#recover错误拦截" class="headerlink" title="recover错误拦截"></a>recover错误拦截</h2><p>运行时panic异常一旦被引发会导致程序崩溃。<br>Go使用recover拦截panic的内建函数recover，可以让程序从panic的状态恢复并重新取得流程控制权。</p><p>recover只在defer调用的函数中有效</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Demo</span><span class="hljs-params">(i <span class="hljs-type">int</span>)</span></span> &#123;<br><span class="hljs-comment">//定义10个元素的数组</span><br><span class="hljs-keyword">var</span> arr [<span class="hljs-number">10</span>]<span class="hljs-type">int</span><br><span class="hljs-comment">//错误拦截要在产生错误前设置</span><br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//设置recover拦截错误信息</span><br>err := <span class="hljs-built_in">recover</span>()<br><span class="hljs-comment">//产生panic异常  打印错误信息</span><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br>&#125;<br>&#125;()<br><span class="hljs-comment">//根据函数参数为数组元素赋值</span><br><span class="hljs-comment">//如果i的值超过数组下标 会报错误：数组下标越界</span><br>arr[i] = <span class="hljs-number">10</span><br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>Demo(<span class="hljs-number">10</span>)<br><span class="hljs-comment">//产生错误后 程序继续</span><br>fmt.Println(<span class="hljs-string">&quot;程序继续执行...&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>语法</tag>
      
      <tag>defer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>函数</title>
    <link href="/2023/07/15/%E5%87%BD%E6%95%B0/"/>
    <url>/2023/07/15/%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>Go函数可以返回多个值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">swap</span><span class="hljs-params">(x, y <span class="hljs-type">string</span>)</span></span> (<span class="hljs-type">string</span>, <span class="hljs-type">string</span>) &#123;<br>   <span class="hljs-keyword">return</span> y, x<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>   a, b := swap(<span class="hljs-string">&quot;Mahesh&quot;</span>, <span class="hljs-string">&quot;Kumar&quot;</span>)<br>   fmt.Println(a, b)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="init函数与import"><a href="#init函数与import" class="headerlink" title="init函数与import"></a>init函数与import</h2><p>init函数可以在任何package中，可以在一个package中出现零次或多次（为了可读性和维护，最好只写一个init）</p><h2 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h2><p>main 只能在package main中，package main中必须有main函数</p><h2 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h2><p>Go程序自动调用init()和main()，不需要手动调用。程序始于main包，如果在main中调用了其他包，那么在编译的时候依次导入。一个包被多个包导入，那么它将只导入一次。<br>一个包被导入后，先导入它导入的其他包，把这些包里的常量和变量进行初始化，然后执行init函数（如果有）。所有导入的包加载完毕后开始对main中的常量变量进行初始化，然后执行init函数（如果有），最后执行main函数。</p><img src="/2023/07/15/%E5%87%BD%E6%95%B0/image.png" class="" title="执行过程"><h2 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h2><p>Go函数传递参数分为值传递和引用传递（指针传递）</p><p>值传递在调用函数时复制一份实际参数传递到函数中，不会影响到实际参数</p><p>引用传递使用取地址符&amp;将实际参数的地址传递给函数，函数的参数类型前加*号表示参数是指针。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>   <span class="hljs-comment">/* 定义局部变量 */</span><br>   <span class="hljs-keyword">var</span> a <span class="hljs-type">int</span> = <span class="hljs-number">100</span><br>   <span class="hljs-keyword">var</span> b <span class="hljs-type">int</span>= <span class="hljs-number">200</span><br><br><br>   fmt.Printf(<span class="hljs-string">&quot;交换前，a 的值 : %d\n&quot;</span>, a )<br>   fmt.Printf(<span class="hljs-string">&quot;交换前，b 的值 : %d\n&quot;</span>, b )<br><br><br>   <span class="hljs-comment">/* 调用 swap() 函数</span><br><span class="hljs-comment">   * &amp;a 指向 a 指针，a 变量的地址</span><br><span class="hljs-comment">   * &amp;b 指向 b 指针，b 变量的地址</span><br><span class="hljs-comment">   */</span><br>   swap(&amp;a, &amp;b)<br><br><br>   fmt.Printf(<span class="hljs-string">&quot;交换后，a 的值 : %d\n&quot;</span>, a )<br>   fmt.Printf(<span class="hljs-string">&quot;交换后，b 的值 : %d\n&quot;</span>, b )<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">swap</span><span class="hljs-params">(x *<span class="hljs-type">int</span>, y *<span class="hljs-type">int</span>)</span></span> &#123;<br>   <span class="hljs-keyword">var</span> temp <span class="hljs-type">int</span><br>   temp = *x    <span class="hljs-comment">/* 保存 x 地址上的值 */</span><br>   *x = *y      <span class="hljs-comment">/* 将 y 值赋给 x */</span><br>   *y = temp    <span class="hljs-comment">/* 将 temp 值赋给 y */</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>语法</tag>
      
      <tag>函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>变量与常量</title>
    <link href="/2023/07/13/%E5%8F%98%E9%87%8F%E4%B8%8E%E5%B8%B8%E9%87%8F/"/>
    <url>/2023/07/13/%E5%8F%98%E9%87%8F%E4%B8%8E%E5%B8%B8%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="变量的声明"><a href="#变量的声明" class="headerlink" title="变量的声明"></a>变量的声明</h2><h3 id="单变量声明"><a href="#单变量声明" class="headerlink" title="单变量声明"></a>单变量声明</h3><p>声明变量使用var关键字</p><ol><li>指定变量类型不赋值<br><code>var v_name v_type</code></li><li>根据值自行判断变量类型<br><code>var v_name = value</code></li><li>省略var, 使用 :&#x3D;<br><code>v_name := value</code></li></ol><h3 id="多变量声明"><a href="#多变量声明" class="headerlink" title="多变量声明"></a>多变量声明</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 1</span><br><span class="hljs-keyword">var</span> x,y <span class="hljs-type">int</span><br><span class="hljs-keyword">var</span> ( <span class="hljs-comment">// 这种写法一般用于全局变量</span><br>    a <span class="hljs-type">int</span><br>    b <span class="hljs-type">bool</span><br>)<br><span class="hljs-keyword">var</span> c,d <span class="hljs-type">int</span> = <span class="hljs-number">1</span>, <span class="hljs-number">2</span><br><span class="hljs-comment">// 2</span><br><span class="hljs-keyword">var</span> e, f = <span class="hljs-number">123</span>, <span class="hljs-string">&quot;str&quot;</span><br></code></pre></td></tr></table></figure><p>不带声明格式的只能在函数体内声明<br><code>g, h := 123, &quot;在函数体内使用&quot;</code></p><h1 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h1><p>. 常量不会被修改<br>. 是一个简单值的标识符，数据类型只可以是布尔型、数字型（整数型、浮点型和复数）和字符串型。</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> identifier [<span class="hljs-keyword">type</span>] = value<br></code></pre></td></tr></table></figure><p>如果省略类型[type]，编译器将根据变量的值自动判断类型（隐式类型定义）</p><p>常量可以用作枚举</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> (<br>    Unknown = <span class="hljs-number">0</span><br>    Female = <span class="hljs-number">1</span><br>    Male = <span class="hljs-number">2</span><br>)<br></code></pre></td></tr></table></figure><p>常量可以用len(), cap(), unsafe.Sizeof()常量计算表达式的值。常量表达式中的函数必须是内置函数。</p><h2 id="iota"><a href="#iota" class="headerlink" title="iota"></a>iota</h2><p>如果定义的常量只是为了彼此区分，它的值不那么重要，比如不同常量的值定义成0, 1, 2 …，可以使用iota自增长简化常量增长数字的定义。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> (<br>    Red = <span class="hljs-literal">iota</span> <span class="hljs-comment">// 0</span><br>    Blue       <span class="hljs-comment">// 1</span><br>    Yellow     <span class="hljs-comment">// 2</span><br>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>语法</tag>
      
      <tag>变量</tag>
      
      <tag>常量</tag>
      
      <tag>iota</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
